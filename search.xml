<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>自定义View学习</title>
    <url>/2019/09/15/%E8%87%AA%E5%AE%9A%E4%B9%89View%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<h3 id="为什么要自定义View？"><a href="#为什么要自定义View？" class="headerlink" title="为什么要自定义View？"></a>为什么要自定义View？</h3><p>系统配置的View满足不了我们的需求，我们需要针对业务制作一个自己的View。</p>
<h3 id="怎么自定义View？步骤是啥？"><a href="#怎么自定义View？步骤是啥？" class="headerlink" title="怎么自定义View？步骤是啥？"></a>怎么自定义View？步骤是啥？</h3><p> 我是小白啥不懂呀，怎么去自定义一个自己的view呢？下面跟着我一步步先定义一个正方形的view试试看。</p>
<a id="more"></a>
<h5 id="在values目录下新建一个firs-xml文件-编写内容如下："><a href="#在values目录下新建一个firs-xml文件-编写内容如下：" class="headerlink" title="在values目录下新建一个firs.xml文件,编写内容如下："></a>在values目录下新建一个firs.xml文件,编写内容如下：</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"first_test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这个是什么呢？这个是我们给自定义View设置的<strong>属性文件</strong>，但是我们现在只是把styleable命名为first_test，其他一个属性也没加。后面会讲</p>
<h5 id="新建一个java文件继承于View"><a href="#新建一个java文件继承于View" class="headerlink" title="新建一个java文件继承于View"></a>新建一个java文件<strong>继承于View</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstTest</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FirstTest</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">FirstTest</span><span class="params">(Context context, AttributeSet first)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>这里之重写了View的两个<strong>构造函数</strong>（View不止这两个构造函数，但是这两个是必写的，其他的后面会讲）</p>
<h5 id="然后把我们的view加入我们的布局当中"><a href="#然后把我们的view加入我们的布局当中" class="headerlink" title="然后把我们的view加入我们的布局当中"></a>然后把我们的view加入我们的布局当中</h5><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.example.a73233.test.FirstTest</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#00BCD4"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br></pre></td></tr></table></figure>
<p>这里我们给他设置了三个系统属性，宽度和高度，以及背景颜色。</p>
<p>是的，这样自定义view的初步工作就完成了。但是显然这个View是空空的，啥也没有。。。好，我们回到Java文件给他搞点东西。<br>我们看到重写了View的一个<strong>构造函数</strong>，但显然是不够的。那么我们还要重写什么函数呢？如下：</p>
<h5 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure()"></a><strong>onMeasure()</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstTest</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FirstTest</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>onMeasure() 函数的功能负责<strong>测量我们View的宽高尺寸</strong> 这里出现了两个参数<strong>widthMeasureSpec</strong> 和<strong>heightMeasureSpec</strong> 。</p>
<p>这两个看着有点眼熟的是什么东东？他们其实就是我们从刚刚的布局中拿到的<strong>宽度和高度</strong> 。重点来了，以heightMeasureSpec为例，虽然它是<strong>一个参数</strong>，但是它其实携带了<strong>两个量</strong>，其一为我们拿到的view的高度，其二为<strong>测量模式</strong>。</p>
<p>我们用起来是这样的：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> heightSize = MeasureSpec.getMode(heightMeasureSpec);<span class="comment">//取出的高度</span></span><br><span class="line"><span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);<span class="comment">//取出的测量模式</span></span><br></pre></td></tr></table></figure>
<p>这个测量模式有三种，如下表：<br>|测量模式| 二进制数值 |描述|<br>|–|–|–<br>|  UNSPECIFIED|  00|默认值，父控件没有给子view任何限制，子View可以设置为任意大小。<br>|EXACTLY| 01|表示父控件已经确切的指定了子View的大小。<br>|AT_MOST| 10|表示子View具体大小没有尺寸限制，但是存在上限，上限一般为父View大小。</p>
<p>好了，理论搞完了，因为我们要做的是一个正方形的view ,我们添加多一点代码来完成这个onMeasure() 函数。代码比较简单。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> defaultSize, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mySize = defaultSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> size = MeasureSpec.getSize(measureSpec);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.UNSPECIFIED: &#123;</span><br><span class="line">                mySize = defaultSize;<span class="comment">//默认大小</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.AT_MOST: &#123;</span><br><span class="line">                mySize = size;      <span class="comment">//取最大值</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.EXACTLY: &#123;</span><br><span class="line">                mySize = size;   <span class="comment">//固定值不要改变</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mySize;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> heightSize = getSize(<span class="number">200</span>,heightMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> widthtSize = getSize(<span class="number">200</span>,widthMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(heightSize &gt; widthtSize)&#123;</span><br><span class="line">        heightSize = widthtSize;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        widthtSize = heightSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setMeasuredDimension(widthtSize,heightSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>好了到这里我们可以运行一下了。<br><img src="https://img-blog.csdnimg.cn/20190915185650619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYxOTg1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<p>ok,正方形的view。那么问题又来了，如果我们想定义的是一个圆形的View呢？这就涉及到下面重写的这个函数了。</p>
<h5 id="onDraw"><a href="#onDraw" class="headerlink" title="onDraw()"></a><strong>onDraw()</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p>接下来重写的这个onDraw()函数大有来头，显而易见，上面我们把view的宽高测出来了，这个函数就把我们想要的效果画出来。<br>我们直接上代码（看注释）：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">       Paint paint = <span class="keyword">new</span> Paint();  <span class="comment">//新建一个画笔对象</span></span><br><span class="line">       paint.setColor(Color.BLACK);  <span class="comment">//把画笔设置成黑色</span></span><br><span class="line">       paint.setStrokeWidth(<span class="number">10f</span>);   <span class="comment">//设置画笔粗细</span></span><br><span class="line">       paint.setStyle(Paint.Style.FILL);  <span class="comment">//设置画笔为填充模式</span></span><br><span class="line"></span><br><span class="line">       canvas.drawCircle(<span class="number">300</span>,<span class="number">300</span>,<span class="number">300</span>, paint);<span class="comment">//开始绘制圆形</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>
<p><img src="https://img-blog.csdnimg.cn/20190915185545555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYxOTg1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在这里你可以发现明明onDraw函数画的是一个圆，怎么刚才的正方形还在？那是因为在onMeasure()函数我们确定了控件大小（占地面积），但是画圆的时候没用完，所以还能看见我们在<strong>布局文件设定的背景颜色</strong>，我们把背景色去掉就只剩下一个圆了。<br><img src="https://img-blog.csdnimg.cn/20190915190325978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYxOTg1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p>
<h3 id="自定义view就这样？"><a href="#自定义view就这样？" class="headerlink" title="自定义view就这样？"></a>自定义view就这样？</h3><p>怎么可能？上面只是画一个圆来简单的介绍了自定义一个view的步骤。</p>
<ul>
<li>还记得我们一开始新建了一个view的firs.xml的文件吧，我没还可以给这个view添加更多的属性。<a href="https://www.jianshu.com/p/8844de6addb3" target="_blank" rel="noopener">看这里</a></li>
<li>还有我们在重写view的onDraw()函数的时候，设置了画笔的属性，那么画笔还有那些属性呢？</li>
<li>除了圆，我们还可以画其他的图形，怎么画呢?<a href="https://www.gcssloop.com/customview/Canvas_BasicGraphics" target="_blank" rel="noopener">看这里</a></li>
</ul>
<p>博客参考各种网络资源，侵删，若有错误，恳请指正。</p>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Android修改状态栏</title>
    <url>/2019/09/14/Android%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81%E6%A0%8F/</url>
    <content><![CDATA[<h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><p>这里的处理都是Android5.0以上的。</p>
<h2 id="修改状态栏颜色"><a href="#修改状态栏颜色" class="headerlink" title="修改状态栏颜色"></a>修改状态栏颜色</h2><p><img src="https://img-blog.csdnimg.cn/20191004165832122.png" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Window window = activity.getWindow();</span><br><span class="line">window.setStatusBarColor(Color.MAGENTA);</span><br></pre></td></tr></table></figure>

<a id="more"></a>

<h2 id="隐藏状态栏"><a href="#隐藏状态栏" class="headerlink" title="隐藏状态栏"></a>隐藏状态栏</h2><p><img src="https://img-blog.csdnimg.cn/20191004165449215.png" alt="在这里插入图片描述"></p>
<ul>
<li>法一<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Window window = activity.getWindow();</span><br><span class="line">View decorView = window.getDecorView();</span><br><span class="line">decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);</span><br></pre></td></tr></table></figure></li>
<li>法二<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Window window = activity.getWindow();</span><br><span class="line">window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br></pre></td></tr></table></figure></li>
<li><h2 id="半透明状态栏"><a href="#半透明状态栏" class="headerlink" title="半透明状态栏"></a>半透明状态栏</h2><img src="https://img-blog.csdnimg.cn/20191004165945790.png" alt="在这里插入图片描述"><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Window window = activity.getWindow();</span><br><span class="line">window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="全透明状态栏实现沉浸式"><a href="#全透明状态栏实现沉浸式" class="headerlink" title="全透明状态栏实现沉浸式"></a>全透明状态栏实现沉浸式</h2><p><img src="https://img-blog.csdnimg.cn/20191004170018316.png" alt="在这里插入图片描述"></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Window window = activity.getWindow();</span><br><span class="line"><span class="comment">/*如果之前是办透明模式，要加这一句需要取消半透明的Flag</span></span><br><span class="line"><span class="comment">window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);*/</span></span><br><span class="line">window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE |View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);</span><br><span class="line">window.setStatusBarColor(Color.TRANSPARENT);</span><br></pre></td></tr></table></figure>
<h2 id="修改状态栏字体颜色"><a href="#修改状态栏字体颜色" class="headerlink" title="修改状态栏字体颜色"></a>修改状态栏字体颜色</h2><ul>
<li>设置状态栏图标和文字颜色为黑色<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Window window = activity.getWindow();</span><br><span class="line">window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</span><br></pre></td></tr></table></figure></li>
<li>设置状态栏图标和文字颜色为白色<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN|View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</span><br></pre></td></tr></table></figure>
参考大大博客<br><a href="https://www.cnblogs.com/ldq2016/p/8353190.html" target="_blank" rel="noopener">https://www.cnblogs.com/ldq2016/p/8353190.html</a><br><a href="https://www.jianshu.com/p/31c4b324894e" target="_blank" rel="noopener">https://www.jianshu.com/p/31c4b324894e</a></li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android入门</tag>
      </tags>
  </entry>
  <entry>
    <title>生命周期--Activity</title>
    <url>/2019/07/29/%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F-Activity/</url>
    <content><![CDATA[<h2 id="回调方法介绍"><a href="#回调方法介绍" class="headerlink" title="回调方法介绍"></a>回调方法介绍</h2><p><strong>说起Activity的生命周期想必离不开一幅图</strong><a id="more"></a><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjIzOTgxNy01N2JiMzRiYmYyMDE4NTNkLnBuZw" alt=""><br>方法|描述|常用情景<br>:—:|:—:|:—:<br>onCreate()|当活动第一次创建时调用|初始化数据，加载布局，绑定事件等<br>onStart()|活动被启动时调用|略<br>onRestart()|活动停止后被重启时调用|略<br>onResume()|活动用户可见时，即开始与用户交互时调用，此时活动必位于栈顶|略<br>onPause()|启动或者恢复另外一个活动时调用|信息持久化存储操作，停止消耗CPU资源等执行熟读要快，否则影响下一活动使用<br>onStop()|活动<strong>完全</strong>不可见时调用|因为活动界面会被覆盖或销毁，所有要储存重要信息<br>onDestory()|活动被销毁即出栈时被调用|数据回收，资源释放等<br>onSaveInstanceState()|活动被异常停止，可以用Bundle保存数据，可以在活动再次创建时的onCreate()方法中使用保存下来的数据|防止活动异常停止导致的数据丢失</p>
<ul>
<li><p>与用户交互（前台）时期：onResume() -&gt; onPause()</p>
</li>
<li><p>可见到不可见时期（对应用而言）：onStart() -&gt; onStop()</p>
</li>
<li><p>启动到销毁时期：onCreat() -&gt; onDestory()</p>
<h2 id="Activity的启动方式"><a href="#Activity的启动方式" class="headerlink" title="Activity的启动方式"></a>Activity的启动方式</h2><p>  首先要知道的是活动的管理用的是Task，Task是返回栈。<br>  当活动创建时压栈，活动被销毁时出栈。活动的启动方式一共有四种。</p>
</li>
<li><p><strong>standard</strong><br>这种模式是活动默认的启动方式。特点：每创建一个活动，则一个活动压栈，不管栈中是否已经存在该活动的实例。</p>
</li>
<li><p><strong>singleTop</strong><br>这种模式呢不会重复创建栈顶的活动，就是说当新创建的活动与栈顶的活动一样时不会重复创建，而是直接调用栈顶的活动。</p>
</li>
<li><p><strong>singleTask</strong><br>这种模式可以让整个程序上下文只存在一个实例，就是说，创建新的实例前会判断栈中是否已经存在相同的实例，倘若已经存在，则不会新创实例。</p>
</li>
<li><p><strong>singlelnstance</strong><br>指定这种模式的活动，会启动一个新的返回栈来管理该活动。无论哪个程序访问该活动都共用同一个返回栈</p>
</li>
</ul>
<p><strong>那个怎么指定一个活动的启动方式呢</strong><br>在AndroidManifest.xml中的activity标签中指定，例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><ul>
<li><p>启动活动1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">活动1执行了: onCreate()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br></pre></td></tr></table></figure>
</li>
<li><p>活动1跳转活动2</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">活动1执行了: onPause()</span><br><span class="line">活动2执行了: onCreate()</span><br><span class="line">活动2执行了: onStart()</span><br><span class="line">活动2执行了: onResume()</span><br><span class="line">活动1执行了: onStop()</span><br><span class="line">活动1执行了: onSaveInstanceState(Bundle outState)</span><br></pre></td></tr></table></figure>
</li>
<li><p>活动2点击back返回活动1</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">活动2执行了: onPause()</span><br><span class="line">活动1执行了: onRestart()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br><span class="line">活动2执行了: onStop()</span><br><span class="line">活动2执行了: onDestroy()</span><br></pre></td></tr></table></figure>
<p>1、可见活动不可见了暂时不会被销毁，但是点击back会。<br>2、从活动1启动活动2，活动1的  <strong>onSaveInstanceState()</strong>  会被执行；但是按back键返回活动1，活动2的  <strong>onSaveInstanceState()</strong>  并不会执行，即使活动2已经被销毁。<br>3、从活动1启动活动2，先执行活动1的  <strong>onPause()</strong>  然后创建活动2，再执行活动1的 <strong>onStop()</strong>，因此  <strong>onPause()</strong>  的操作不宜过于耗时，否则影响活动2的启动。</p>
</li>
<li><p>熄屏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">活动1执行了: onPause()</span><br><span class="line">活动1执行了: onStop()</span><br><span class="line">活动1执行了: onSaveInstanceState(Bundle outState)</span><br></pre></td></tr></table></figure></li>
<li><p>再亮屏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">活动1执行了: onRestart()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br></pre></td></tr></table></figure></li>
<li><p>点击home键</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">活动1执行了: onPause()</span><br><span class="line">活动1执行了: onStop()</span><br><span class="line">活动1执行了: onSaveInstanceState(Bundle outState)</span><br></pre></td></tr></table></figure></li>
<li><p>再打开app</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">活动1执行了: onRestart()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br></pre></td></tr></table></figure>
<p>熄屏和返回home，都不会销毁该活动，再次打开app会被重启，执行 <strong>onRestart()</strong> 方法。</p>
</li>
<li><p>竖屏旋转为横屏 或者 横屏转竖屏</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">活动1执行了: onPause()</span><br><span class="line">活动1执行了: onStop()</span><br><span class="line">活动1执行了: onSaveInstanceState(Bundle outState)</span><br><span class="line">活动1执行了: onDestroy()</span><br><span class="line">活动1执行了: onCreate()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br></pre></td></tr></table></figure>
<p>屏幕方向的改变，会<strong>销毁</strong>当前活动，并且<strong>新创建</strong>一个新的活动。</p>
</li>
<li><p>横屏状态下熄屏再亮屏 或者 横屏状态点击home键再点开app</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">活动1执行了: onPause()</span><br><span class="line">活动1执行了: onStop()</span><br><span class="line">活动1执行了: onSaveInstanceState(Bundle outState)</span><br><span class="line">活动1执行了: onDestroy()</span><br><span class="line">活动1执行了: onCreate()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br></pre></td></tr></table></figure>
<p>横屏状态下熄屏或者横屏状态点击home键，都会销毁当前活动，再次打开时新创建一个活动，此时屏幕也变成了竖屏状态。</p>
</li>
</ul>
<p>补充：默认情况下，<strong>系统配置发生改变时</strong>，如屏幕旋转，Activity是会被重新创建的，当然你想要不重建Activity也行，AndroidManifest的Activity标签下有一个属性<strong>android：configChanges</strong>，该属性指定的系统配置即使改变了，Activity也不会被销毁重建。如，我不希望屏幕方向改变而重新创建活动则：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">"orientation"</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>该属性常用的值有：<br>1、orientation：屏幕方向发生改变<br>2、locale：设备的本地位置发生了改变，一般指切换了系统语言；<br>3、keyboardHidden：键盘的可访问性发生了改变，例如用户调出了键盘。</p>
<pre><code>最后说一下onSaveInstanceState()这个正常finifh一个活动方法不会被执行的,其它情况
停止一个活动则会执行。我的理解，onSaveInstanceState()是防止某些数据在Activity停
止时丢失的（用Bundle存起来），如果该活动还有可能被重启或重新创建则会执行onSaveIn
stanceState()，以便恢复上回的数据，但是正常finish一个活动，说明该活动已经正
常结束了，我不会再用它了，则不会执行onSaveInstanceState()。</code></pre><p>其实有兴趣还可以对Activity整个周期的的实现源码看一遍，这里不多说了，从<a href="https://www.jianshu.com/p/ee6a0e45bbec" target="_blank" rel="noopener">https://www.jianshu.com/p/ee6a0e45bbec</a>可知一下几点：</p>
<ul>
<li>activity的生命周期是通过handler消息来控制的；</li>
<li>activity的实例创建是通过反射来实现的；</li>
<li>在activity onResume生命周期后，才将布局view绘制添加到系统布局中并显示给用户；</li>
<li>在activity onDestory生命周期后，只是将window中的view，DecorView移除并置为null，并没有将activity实例置为null，activity实例仍然在内存中，如果在gc时还有持有该activity的引用就会造成内存泄露，也就是说activity onDestory后只是页面的销毁，并不代表当前activity实例的销毁。<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2></li>
<li>《第一行代码》</li>
<li>博客<a href="https://www.jianshu.com/p/b5a72a741025" target="_blank" rel="noopener">https://www.jianshu.com/p/b5a72a741025</a></li>
<li>博客<a href="https://www.jianshu.com/p/ec50675ed116" target="_blank" rel="noopener">https://www.jianshu.com/p/ec50675ed116</a><br>如有错误，恳请指正。</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android入门</tag>
      </tags>
  </entry>
  <entry>
    <title>大一暑假</title>
    <url>/2019/07/28/%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87/</url>
    <content><![CDATA[<blockquote>
<p>难以想象，暑假一半已经过去了。毫不谦虚地说，从放假的第一天就玩到现在。非要用一个词来形容的话，应该是心满意足吧hh…然后接下来要打卡好好学习了。</p>
</blockquote>
<a id="more"></a>
<table>
<thead>
<tr>
<th align="center">时间</th>
<th align="center">理论</th>
<th align="center">编程</th>
<th align="center">生活/练琴</th>
</tr>
</thead>
<tbody><tr>
<td align="center">7.28</td>
<td align="center">四大组件生命周期</td>
<td align="center">构思app</td>
<td align="center">辅导妹妹学习</td>
</tr>
<tr>
<td align="center">7.29</td>
<td align="center">四大组件生命周期</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">7.30</td>
<td align="center">没禁得住诱惑</td>
<td align="center">又跟朋友</td>
<td align="center">出去耍了一天</td>
</tr>
<tr>
<td align="center">7.31</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">吃狗肉</td>
</tr>
<tr>
<td align="center">8.1</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">台风ing</td>
</tr>
<tr>
<td align="center">8.2</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">梁祝指法</td>
</tr>
<tr>
<td align="center">8.3</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">同学聚会</td>
</tr>
<tr>
<td align="center">8.5</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">梁祝第一段</td>
</tr>
<tr>
<td align="center">8.6</td>
<td align="center">服务生命周期</td>
<td align="center"></td>
<td align="center">辅导妹妹</td>
</tr>
<tr>
<td align="center">8.8</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">梁祝第二段</td>
</tr>
<tr>
<td align="center">8.9</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">梁祝左手</td>
</tr>
<tr>
<td align="center">8.10</td>
<td align="center">碎片生命周期</td>
<td align="center"></td>
<td align="center">辅导妹妹</td>
</tr>
<tr>
<td align="center">8.11</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">梁祝双手弹奏</td>
</tr>
<tr>
<td align="center">8.12</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">东莞之行</td>
</tr>
<tr>
<td align="center">8.13</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">寄宿生活开始</td>
</tr>
<tr>
<td align="center">8.13</td>
<td align="center"></td>
<td align="center">抢红包插件</td>
<td align="center">认识新的朋友</td>
</tr>
<tr>
<td align="center">8.14</td>
<td align="center"></td>
<td align="center">抢红包插件bug修复</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8.16</td>
<td align="center">自定义view</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8.18</td>
<td align="center">自定义view</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8.19</td>
<td align="center">自定义view</td>
<td align="center"></td>
<td align="center">陌生的城市</td>
</tr>
<tr>
<td align="center">8.20</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">电影沉默的证人</td>
</tr>
<tr>
<td align="center">8.21</td>
<td align="center">自定义view</td>
<td align="center"></td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8.22</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">清远之行</td>
</tr>
<tr>
<td align="center">8.23</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">清远之行</td>
</tr>
<tr>
<td align="center">8.24</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">辅导婷婷学习</td>
</tr>
<tr>
<td align="center">8.25</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">辅导婷婷学习</td>
</tr>
<tr>
<td align="center">8.26</td>
<td align="center"></td>
<td align="center">抢红包完善</td>
<td align="center"></td>
</tr>
<tr>
<td align="center">8.27</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">累</td>
</tr>
<tr>
<td align="center">8.28</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">又去清远，熟悉的旅馆</td>
</tr>
<tr>
<td align="center">8.29</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">离别的夜晚</td>
</tr>
<tr>
<td align="center">8.30</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">到校</td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>Java实现简单爬虫</title>
    <url>/2019/06/26/Java%E5%AE%9E%E7%8E%B0%E7%AE%80%E5%8D%95%E7%88%AC%E8%99%AB/</url>
    <content><![CDATA[<p>怎么用Java比较简单地去网上爬一些东西呢，比如一些图片。作为Java小白（在此之前，都不知道爬虫是个什么，hhh..）最近遇到这个问题，去网上找了一些思路。大致是这样的：</p>
<ul>
<li>先访问某网络得到它的网站原代码</li>
<li>用正则表达式匹配出你想要的内容。</li>
</ul>
<a id="more"></a>

<h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><p>现在在<a href="https://pixabay.com/zh/images/search/%E5%BF%AB%E4%B9%90/" target="_blank" rel="noopener">https://pixabay.com/zh/images/search/%E5%BF%AB%E4%B9%90/</a>这个网站爬一张图片试试看。</p>
<ul>
<li>Java常规操作访问这个网站可以返回这个网站的原代码。<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="actionscript">(<span class="function"><span class="keyword">function</span><span class="params">(w,d,s,l,i)</span></span>&#123;w[l]=w[l]||[];w[l].push(&#123;<span class="string">'gtm.start'</span>:<span class="keyword">new</span> </span></span><br><span class="line"><span class="javascript">    <span class="built_in">Date</span>().getTime(),<span class="attr">event</span>:<span class="string">'gtm.js'</span>&#125;);<span class="keyword">var</span> f=d.getElementsByTagName(s)</span></span><br><span class="line"><span class="actionscript">    [<span class="number">0</span>],j=d.createElement(s),dl=l!=<span class="string">'dataLayer'</span>?<span class="string">'&amp;l='</span>+l:<span class="string">''</span>;j.async=<span class="literal">true</span>;j.src=<span class="string">'https://www.googletagmanager.com/gtm.js?id='</span></span></span><br><span class="line"><span class="javascript">    +i+dl;f.parentNode.insertBefore(j,f);&#125;)(<span class="built_in">window</span>,<span class="built_in">document</span>,<span class="string">'script'</span>,<span class="string">'dataLayer'</span>,<span class="string">'GTM-5CF9ZN'</span>);</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure>
我们打印出返回的结果，发现就是一大段html代码。没学过，看不懂，但是我想要爬取的图片连接，经过观察发现，他的图片连接都在这一块：<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">div class="item" data-w="640" data-h="426"&gt;</span><br><span class="line">	<span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">"https://cdn.pixabay.com/photo/2019/03/05/12/26/toque-macaque-4036088__340.jpg 1x, https://cdn.pixabay.com/photo/2019/03/05/12/26/toque-macaque-4036088__480.jpg 2x"</span> <span class="attr">src</span>=<span class="string">"https://cdn.pixabay.com/photo/2019/03/05/12/26/toque-macaque-4036088__340.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure>
发现只要是<strong>srcset=””</strong>引号里面的都是那个网站上面的图片连接。</li>
<li>用正则表达式将我们需要的连接从返回的一大块代码中匹配出来<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Pattern pattern1 = Pattern.compile(<span class="string">"(?&lt;=srcset=\").*?(?=\")"</span>); </span><br><span class="line">Matcher matcher1 = pattern1.matcher(ResponseData);</span><br><span class="line"><span class="comment">//ResponseData是返回的结果，是一段字符串</span></span><br><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (matcher1.find())&#123;</span><br><span class="line">    String group1 = matcher1.group();</span><br><span class="line">    list1.add(group1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>最后可以把list里面的内容打印出来检验一下，这是爬出来的结果其中一条连接：<a href="https://cdn.pixabay.com/photo/2015/01/07/15/51/woman-591576__340.jpg" target="_blank" rel="noopener">https://cdn.pixabay.com/photo/2015/01/07/15/51/woman-591576__340.jpg</a><br>当然这是一张缩略图（因为网站上面的是缩略图），想要找它的详图也简单</li>
<li>匹配图片详情页链接（也在那一大段代码里面），逐一访问。</li>
<li>访问返回的数据，再匹配出详情页的图片就OK了。</li>
</ul>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Android四层架构</title>
    <url>/2019/04/09/Android%E5%9B%9B%E5%B1%82%E6%9E%B6%E6%9E%84/</url>
    <content><![CDATA[<h1 id="Android的四层架构"><a href="#Android的四层架构" class="headerlink" title="Android的四层架构"></a>Android的四层架构</h1><ul>
<li><p>Linux内核层<br>Android系统是基于Linux内核的，这一层为Android设备的各种硬件提供了<strong>底层的驱动</strong>，如<br>显示驱动、音频驱动、照相机驱动、蓝牙驱动、Wi-Fi驱动、电源管理等。</p>
<a id="more"></a>
</li>
<li><p>系统运行库层<br>这一层主要通过<strong>C/C++库</strong>来给Android提供一些特性支持，如SQLite库提供数据库的支持，OpenGL|ES库提供3D绘图，WebKit提供浏览器内核。这一层还有Android运行时库，其中包含ART运行环境<br>ART能够把应用程序的<strong>字节码转换为机器码</strong>，是Android所使用的一种新的<strong>虚拟机</strong>，改善了性能、垃圾回收(Garbage Collection)、应用程序除错以及性能分析。ART引入了AOT这种预编译技术，在应用程序安装的过程中，ART就已经将所有的字节码重新编译成了机器码。应用程序运行过程中无需进行实时的编译工作，只需要进行<strong>直接调用</strong>。因此，ART极大的提高了应用程序的<strong>运行效率</strong>，同时也减少了手机的<strong>电量消耗</strong>。</p>
</li>
</ul>
<ul>
<li>应用框架层<br>这一层主要提供了构建应用时会用到的一些各种API</li>
</ul>
<ul>
<li>应用层，Android安装的所有程序，无论是自带的还是下载的或是自己开发的应用程序都属于这一层。</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Android--使用LiteaPal操作SQLite</title>
    <url>/2019/02/14/Android-%E4%BD%BF%E7%94%A8LiteaPal%E6%93%8D%E4%BD%9CSQLite/</url>
    <content><![CDATA[<h3 id="什么是LitePal"><a href="#什么是LitePal" class="headerlink" title="什么是LitePal?"></a>什么是LitePal?</h3><p>LitePal是Github上的开源数据库框架，使用它呢，可以使我们不需要直接用SQL语句就可以操作安卓自带的SQLite数据库，而是用<strong>面对对象</strong>的思维去操着数据库，这对于只接触过Java没接触过SQL的小白(比如笔者)简直是一大福音。这里介绍Android Studio <strong>Java语言</strong>下使用LitePal。</p>
<h3 id="配置LitePal"><a href="#配置LitePal" class="headerlink" title="配置LitePal"></a>配置LitePal</h3><p>第一步、在app/build.gradle的dependencies中添加依赖：</p>
<a id="more"></a>

<pre><code>implementation &apos;org.litepal.android:java:3.0.0&apos;</code></pre><p>第二步、在 app/src/main 目录下新建名为 assets 的目录，在 assets 目录下新建名为 litepal.xml 的的xml文件。打开litepal.xml将代码改成如下内容</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	数据库名，例如：</span></span><br><span class="line"><span class="comment">    	&lt;dbname value="demo" /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"demo"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	数据库版本号，例如：</span></span><br><span class="line"><span class="comment">    	&lt;version value="1" /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    	指定映射模型，下面会讲到，例如：</span></span><br><span class="line"><span class="comment">    	&lt;list&gt;</span></span><br><span class="line"><span class="comment">    		&lt;mapping class="com.test.model.Reader" /&gt;</span></span><br><span class="line"><span class="comment">    		&lt;mapping class="com.test.model.Magazine" /&gt;</span></span><br><span class="line"><span class="comment">    	&lt;/list&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>最后、配置AndroidManifest.xml，在application加入</p>
<pre><code>android:name=&quot;org.litepal.LitePalApplication&quot;</code></pre><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"org.litepal.LitePalApplication"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"i Note"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure>
<p>这样算是配置完了。还是比较简单的。</p>
<h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul>
<li><p>首先我们先创建一个notelist_SQLite类，对应的是数据库中的notelist_SQLite表</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.litepal.crud.LitePalSupport;</span><br><span class="line"><span class="comment">//notelist_SQLite继承于LitePalSupport</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">notelist_SQLite</span> <span class="keyword">extends</span> <span class="title">LitePalSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNote</span><span class="params">(String note)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.note = note;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> note;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>看到这个类，你应该知道怎么往表里添加数据了吧，面对对象的思维来表的操作是不是很直直观.hhh。。</p>
</li>
<li><p>接下来需要把这个映射模型添加到刚才的litepal.xml中。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span> = <span class="string">"com.example.a73233.i_note.notelist_SQLite"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br></pre></td></tr></table></figure></li>
<li><p>我们对这个表进行任意操做(如：增，删)时就会自动在数据库生成这个表了</p>
<h3 id="升级数据库"><a href="#升级数据库" class="headerlink" title="升级数据库"></a>升级数据库</h3><p>这个简单</p>
</li>
<li><p>每次升级数据库，即：修改notelist_SQLite类，或者增加一个新的类。就在litepal,xml的版本号那里，将1改成2就行了。</p>
</li>
<li><p>这里在notelist_SQLite类增加了data</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">notelist_SQLite</span> <span class="keyword">extends</span> <span class="title">LitePalSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNote</span><span class="params">(String note)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.note = note;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> note;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li><p>修改litepal,xml的版本号</p>
<pre><code>&lt;version value=&quot;2&quot; /&gt;</code></pre><p>这就完成了数据库的升级</p>
<h3 id="向数据库增加数据"><a href="#向数据库增加数据" class="headerlink" title="向数据库增加数据"></a>向数据库增加数据</h3><p>直接上代码，看注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String text = <span class="string">"English text"</span>;</span><br><span class="line">String date = <span class="string">"2019/2/14"</span>;</span><br><span class="line">notelist_SQLite note = <span class="keyword">new</span> notelist_SQLite();  <span class="comment">//获取对象</span></span><br><span class="line">note.set(text); <span class="comment">//增加数据</span></span><br><span class="line">note.set(date);</span><br><span class="line">note.save();   <span class="comment">//保存数据</span></span><br></pre></td></tr></table></figure>
<h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>第一种方法LitePal.find(notelist_SQLite.class, id);找到对应表格的id，将其中数据修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notelist_SQLite note = LitePal.find(notelist_SQLite<span class="class">.<span class="keyword">class</span>, <span class="title">id</span>)</span>;</span><br><span class="line">noteSQ.setDate(<span class="string">"2019年2月14日"</span>);  <span class="comment">//设置更新的数据</span></span><br><span class="line">noteSQ.save();</span><br></pre></td></tr></table></figure>
<p>第二种方法，用 update(id); 将对应id的数据修改</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notelist_SQLite noteSQ = <span class="keyword">new</span> notelist_SQLite();</span><br><span class="line">noteSQ.setDate(<span class="string">"2019年2月14日"</span>);  <span class="comment">//设置更新的数据</span></span><br><span class="line">noteSQ.update(id);</span><br></pre></td></tr></table></figure>
<p>第三种方法，updateAll(); 用法看注释</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notelist_SQLite noteSQ = <span class="keyword">new</span> notelist_SQLite();</span><br><span class="line">noteSQ.setDate(<span class="string">"2019年2月14日"</span>);  <span class="comment">//设置更新的数据</span></span><br><span class="line">noteSQ.updateAll(<span class="string">"note = ?"</span>, <span class="string">"English text"</span>);</span><br><span class="line"><span class="comment">//这里指定note内容是“English text”的表格的Date会被修改成</span></span><br><span class="line"><span class="comment">//"2019年2月14日"如果没有指定，则会修改所有表格的内容。</span></span><br></pre></td></tr></table></figure>
<h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>第一种方法，LitePal.delete(notelist_SQLite.class, id);将对应id的表删除。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LitePal.delete(notelist_SQLite<span class="class">.<span class="keyword">class</span>, <span class="title">id</span>)；</span></span><br></pre></td></tr></table></figure>
<p>第二种方法，LitePal.deleteAll();指定删除的数据</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">LitePal.deleteAll(notelist_SQLite.class,"note = ?","English text");</span><br></pre></td></tr></table></figure>
<h3 id="查询信息"><a href="#查询信息" class="headerlink" title="查询信息"></a>查询信息</h3><p>其实AUDQ都差不多，先看第一种，查询指定id</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">notelist_SQLite note = LitePal.find(notelist_SQLite<span class="class">.<span class="keyword">class</span>, <span class="title">id</span>)</span>;</span><br><span class="line">String text = note.getNote();</span><br></pre></td></tr></table></figure>
<p>第二种，查询所有id的数据</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">List&lt;notelist_SQLite&gt; note = </span><br><span class="line">LitePal.findAll(notelist_SQLite<span class="class">.<span class="keyword">class</span>)</span>; <span class="comment">//找出所有数据将其放在List集合</span></span><br></pre></td></tr></table></figure>
<p>还有更多更复杂和更有用的查询方式可以查看LitePal的API。</p>
</li>
<li><p>LitePal的基本操作就介绍完了，还有其他的操作，如: 多线程异步操作、监听数据库创建或升级。可以查看<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="noopener">https://github.com/LitePalFramework/LitePal</a></p>
</li>
<li><p>本文编写参考于：<br><a href="https://www.baidu.com/s?ie=utf-8&f=8&rsv_bp=1&rsv_idx=1&tn=baidu&wd=%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81&oq=litepal%25E6%2593%258D%25E4%25BD%259Csqlite&rsv_pq=9929d52700008f29&rsv_t=2ffdjB%2B6VLYGqPtySqC%2BB%2Bdj4ARtl2f9B8%2FiGVgwyTjp0%2BIoPu2u1ACE%2BF4&rqlang=cn&rsv_enter=1&rsv_sug3=100&rsv_sug1=43&rsv_sug7=101&bs=litepal%E6%93%8D%E4%BD%9Csqlite" target="_blank" rel="noopener">第一行代码</a>和<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="noopener">https://github.com/LitePalFramework/LitePal</a></p>
</li>
</ul>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Android-文件存储</title>
    <url>/2019/02/12/Android-%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/</url>
    <content><![CDATA[<p>移动数据的存储方式之一就是文件存储，这里对其进行介绍。</p>
<h2 id="使用特点与对象"><a href="#使用特点与对象" class="headerlink" title="使用特点与对象"></a>使用特点与对象</h2><p>特点：</p>
<blockquote>
<p>不会对数据进行初始化处理，原封不动地讲数据存储到文件中</p>
</blockquote>
<p>一般这几种数据可以用文件对数据进行存储：</p>
<blockquote>
<ul>
<li>简单的文本数据</li>
<li>二进制数据<a id="more"></a></li>
</ul>
</blockquote>
<h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>Android文件存储的方法代码和Java文件存储思路是一样的。但是Android文件存储创建文件和Java有所区别。这里Context类提供了一个openFileOutput方法指定存储数据的文件，如果指定文件不存在则会创建该文件。此方法接受两个参数：</p>
<ul>
<li>第一个参数：指定的文件名</li>
<li>第二个参数：文件的操作方式，有两种可供选择：<blockquote>
<p>MODE_APPEND 追加内容<br>MODE_PRIVATE 覆盖之前的内容</p>
</blockquote>
</li>
</ul>
<h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">    FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//文件名为"data", 操作方式为追加</span></span><br><span class="line">        out = openFileOutput(<span class="string">"data"</span>, Context.MODE_APPEND);</span><br><span class="line">        writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</span><br><span class="line">        writer.write(text);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(writer != <span class="keyword">null</span>)&#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="写出文件"><a href="#写出文件" class="headerlink" title="写出文件"></a>写出文件</h3><p>这里将数据读取出来存放在Builder，然后将其返回</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">load</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//指定读取文件"data"</span></span><br><span class="line">        in = openFileInput(<span class="string">"data"</span>);</span><br><span class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">        String line = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            content.append(line);  <span class="comment">//将数据放在Builder</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reader != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android入门</tag>
      </tags>
  </entry>
  <entry>
    <title>RecyclerView的使用</title>
    <url>/2019/02/08/RecyclerView%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    <content><![CDATA[<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><h3 id="添加依赖"><a href="#添加依赖" class="headerlink" title="添加依赖"></a>添加依赖</h3><blockquote>
<p>implementation ‘com.android.support:recyclerview-v7:28.0.0’</p>
</blockquote>
<h3 id="定义适配器"><a href="#定义适配器" class="headerlink" title="定义适配器"></a>定义适配器</h3><p>这个控件使用方法和ListView差不多，都需要先自定义一个布局和一个适配类型，但是适配器的构造不一样，下面是适配器的代码，解析在注释。</p>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//适配器继承与RecyclerView.Adapter，泛型类为适配器的一个内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">photo2Adapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">photo2Adapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;photo1&gt; mphoto2List;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;  <span class="comment">//内部类获取控件</span></span><br><span class="line">        TextView textView;</span><br><span class="line">        ImageView imageView;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(view);</span><br><span class="line">            textView = (TextView) view.findViewById(R.id.name);</span><br><span class="line">            imageView = (ImageView) view.findViewById((R.id.photo1_Image));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">photo2Adapter</span><span class="params">(List&lt;photo1&gt; photo2List)</span></span>&#123;  <span class="comment">//构造方法</span></span><br><span class="line">        mphoto2List = photo2List;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创造ViewHolder实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span></span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.photo1,</span><br><span class="line">                parent,<span class="keyword">false</span>);      <span class="comment">//加载布局</span></span><br><span class="line">        ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给数据赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        photo1 photo2 = mphoto2List.get(position);</span><br><span class="line">        holder.imageView.setImageResource(photo2.getID());</span><br><span class="line">        holder.textView.setText(photo2.getname());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回子项长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mphoto2List.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h2><h3 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);  <span class="comment">//获取控件对象</span></span><br><span class="line">LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);            <span class="comment">//指定控件布局方式，将其设置到控件对象中</span></span><br><span class="line">recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">photo2Adapter adapter = <span class="keyword">new</span> photo2Adapter(photo1List);</span><br><span class="line">recyclerView.setAdapter(adapter);</span><br></pre></td></tr></table></figure>

<h3 id="水平滚动"><a href="#水平滚动" class="headerlink" title="水平滚动"></a>水平滚动</h3><p>如何改成水平滚动呢，只需在传送数据那块代码中添加一句代码即可</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);<span class="comment">//******添加水平滚动代码</span></span><br></pre></td></tr></table></figure>

<h3 id="点击事件"><a href="#点击事件" class="headerlink" title="点击事件"></a>点击事件</h3><p>在适配器中添加代码，看注释：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">View photoView;<span class="comment">//*******添加代码定义最外层布局实例</span></span><br><span class="line">TextView textView;</span><br><span class="line">ImageView imageView;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">	<span class="keyword">super</span>(view);</span><br><span class="line">	photoView = view;<span class="comment">//*******添加代码保存最外层实例</span></span><br><span class="line">	textView = (TextView) view.findViewById(R.id.name);</span><br><span class="line">	imageView = (ImageView) view.findViewById((R.id.photo1_Image));</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"> <span class="keyword">final</span> ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line"><span class="comment">//*************************************为最外层注册事件</span></span><br><span class="line">holder.photoView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> position = holder.getAdapterPosition();</span><br><span class="line">		photo1 photo2 = mphoto2List.get(position);</span><br><span class="line">		Toast.makeText(v.getContext(),<span class="string">"你点击的是："</span>+</span><br><span class="line">				photo2.getname(),Toast.LENGTH_LONG).show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//*******************************为图片注册事件</span></span><br><span class="line">holder.imageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">int</span> position = holder.getAdapterPosition();</span><br><span class="line">		photo1 photo2 = mphoto2List.get(position);</span><br><span class="line">		Toast.makeText(v.getContext(),<span class="string">"你点击的是："</span>+</span><br><span class="line">				photo2.getname(),Toast.LENGTH_LONG).show();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//****************************************************************</span></span><br><span class="line"><span class="keyword">return</span> holder;</span><br></pre></td></tr></table></figure>
<h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><h3 id="适配器外的点击事件"><a href="#适配器外的点击事件" class="headerlink" title="适配器外的点击事件"></a>适配器外的点击事件</h3><p>在适配器里边的点击事件，直接做一个监听就行了，在外边设置监听，就要写多几行代码（长按事件类同）</p>
<ul>
<li>先在适配器里边加入代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> OnitemClick onitemClick;   <span class="comment">//定义点击事件接口</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义设置点击事件监听的方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnitemClickLintener</span> <span class="params">(OnitemClick onitemClick)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.onitemClick = onitemClick;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//定义一个点击事件的接口</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnitemClick</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> ViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line"> 	<span class="keyword">final</span> note_list note_list= mList.get(position);</span><br><span class="line">holder.textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//实现点击事件接口</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                onitemClick.onItemClick(position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在外边加入代码：</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">adapter.setOnitemClickLintener(<span class="keyword">new</span> MyAdapter.OnitemClick() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//这里写逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h3 id="设置item的间距"><a href="#设置item的间距" class="headerlink" title="设置item的间距"></a>设置item的间距</h3><ul>
<li>先新建一个java文件</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpacesItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> space;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpacesItemDecoration</span><span class="params">(<span class="keyword">int</span> space)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.space = space;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view,</span></span></span><br><span class="line"><span class="function"><span class="params">                               RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置item之间的间距（上下左右）</span></span><br><span class="line">        outRect.left = space;</span><br><span class="line">        outRect.right = space;</span><br><span class="line">        outRect.bottom = space;</span><br><span class="line">        <span class="comment">//设置item与parent的间距</span></span><br><span class="line">        <span class="keyword">if</span> (parent.getChildLayoutPosition(view) == <span class="number">0</span>)</span><br><span class="line">            outRect.top = space;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>在Activity添加代码</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">int</span> space = <span class="number">50</span>; <span class="comment">//间距</span></span><br><span class="line">recyclerView.addItemDecoration(<span class="keyword">new</span> SpacesItemDecoration(space));</span><br></pre></td></tr></table></figure>

<h3 id="item的添加与删除"><a href="#item的添加与删除" class="headerlink" title="item的添加与删除"></a>item的添加与删除</h3><h4 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h4><p>在Adapter添加代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//  添加数据</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(<span class="keyword">int</span> position, note_list note_list)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      在list中指定位置添加对象：note_list</span></span><br><span class="line">	mList.add(position,note_list);</span><br><span class="line">	<span class="comment">//添加动画</span></span><br><span class="line">	notifyItemInserted(position);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在外面的Activity调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//指定位置为0，添加对象note_list</span></span><br><span class="line">adapter.addData(<span class="number">0</span>,note_list);</span><br></pre></td></tr></table></figure>
<h4 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h4><p>在Adapter添加代码</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//删除子项</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeData</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">	mList.remove(position);</span><br><span class="line">	<span class="comment">//删除动画</span></span><br><span class="line">	notifyItemRemoved(position);</span><br><span class="line">	<span class="comment">//整体刷新</span></span><br><span class="line">	notifyDataSetChanged();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>在外面的Activity调用</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">adapter.removeData(position);</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Android</category>
      </categories>
      <tags>
        <tag>Android入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Java--I/O(输入输出)流</title>
    <url>/2019/01/28/Java-I-O-%E8%BE%93%E5%85%A5%E8%BE%93%E5%87%BA-%E6%B5%81/</url>
    <content><![CDATA[<h1 id="流？I-O？"><a href="#流？I-O？" class="headerlink" title="流？I/O？"></a>流？I/O？</h1><blockquote>
<p>流是一组有序的数据序列，根据操作可分为输入流和输出流即（I/O流），I/O流也可以理解为一种通道程序。而I/O包提供给了很多工具(类)对I/O流进行操作，从而达到安全地将<strong>源数据通过流传送到目的地</strong>的目的。源和目的地可以是磁盘，键盘，鼠标，显示器，网络，压缩包等等。</p>
</blockquote>
<a id="more"></a>
<h1 id="输入-输出流"><a href="#输入-输出流" class="headerlink" title="输入/输出流"></a>输入/输出流</h1><h2 id="将数据从流里读取进来——输入流"><a href="#将数据从流里读取进来——输入流" class="headerlink" title="将数据从流里读取进来——输入流"></a>将数据从流里读取进来——输入流</h2><ul>
<li>I/O包给我们提供给了两个父类进行数据从流读取进来的操作。</li>
<li>其一<strong>抽象类InputStream</strong>(字节输出流)。该类是所有字节输入流的父类，遇到错误会引发IOException异常。</li>
<li>其二<strong>抽象类Reader</strong>(字符输出流)，该类适用于处理字符文本，是所有字符输入流的父类。</li>
</ul>
<h2 id="将数据输出到流里里边——输出流"><a href="#将数据输出到流里里边——输出流" class="headerlink" title="将数据输出到流里里边——输出流"></a>将数据输出到流里里边——输出流</h2><ul>
<li>I/O包给我们提供给了两个父类进行数据输出到流的操作。</li>
<li>其一<strong>OutputStream</strong>(字节输出流)。该类是所有字节输出流的父类，该类所有方法皆返回 <strong>void</strong>，遇到错误会引发IOException异常。</li>
<li>其二 <strong>Writer</strong>(字符输出流)，该类适用于处理字符文本，是所有字符输出流的父类。</li>
</ul>
<h2 id="I-O流常用子类"><a href="#I-O流常用子类" class="headerlink" title="I/O流常用子类"></a>I/O流常用子类</h2><p><strong>看到这便知，输入流与输出流的操作都各有两个类可以操作。另外</strong>Reader<strong>和</strong>Writer<strong>类有两个子类可以对流中的 字节/字符 进行转换输入输出。</strong></p>
<ul>
<li>InputStreamReader：将流中的字节转换成字符读取进来。</li>
<li>OutputStreamWriter: 将字符转换成字节输出到流。</li>
<li>这两个类通常用作读/写磁盘文件。</li>
</ul>
<p><strong>上述的输入/输出流当中有一种子类：带缓存的输入/输出流。缓存是I/O的一种性能优化。缓存流为I/O增加了内存缓存区。</strong></p>
<p>四个子类(缓存流)如下：</p>
<ul>
<li>BufferedInputStream</li>
<li>BufferedOutputStream</li>
<li>BufferedReader</li>
<li>BufferedWriter</li>
</ul>
<h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><p><strong>该类主要用于文件和目录的创建、文件的查找和文件的删除等。File对象代表磁盘中实际存在的文件和目录。可以通过以下构造方法创建一个File对象。</strong></p>
<h2 id="文件创建"><a href="#文件创建" class="headerlink" title="文件创建"></a>文件创建</h2><blockquote>
<p>new File(String pathname) 如：File abc = new (“d:/1.txt”);</p>
</blockquote>
<blockquote>
<p>new File(String parent,String child), String parent是父路径字符串， String child是子路径字符串。</p>
</blockquote>
<blockquote>
<p>new File(File f,String child); File f父路径对象，String child是子路径字符串。</p>
</blockquote>
<h2 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h2><ul>
<li>File提供了许多方法获取文件本身信息。</li>
</ul>
<table>
<thead>
<tr>
<th align="left">方法</th>
<th align="left">返回值</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">getNamw()</td>
<td align="left">String</td>
<td align="left">获取文件名称</td>
</tr>
<tr>
<td align="left">canRead()</td>
<td align="left">boolean</td>
<td align="left">判断文件是否可读</td>
</tr>
<tr>
<td align="left">canWrite()</td>
<td align="left">boolean</td>
<td align="left">判断文件是否可写</td>
</tr>
<tr>
<td align="left">exits()</td>
<td align="left">boolean</td>
<td align="left">判断文件是否存在</td>
</tr>
<tr>
<td align="left">length()</td>
<td align="left">long</td>
<td align="left">获取文件长度(字节为单位)</td>
</tr>
<tr>
<td align="left">getAbsolutePath()</td>
<td align="left">String</td>
<td align="left">获取文件绝对路径</td>
</tr>
<tr>
<td align="left">getParent()</td>
<td align="left">String</td>
<td align="left">获取文件父路径</td>
</tr>
<tr>
<td align="left">lastModified()</td>
<td align="left">long</td>
<td align="left">获取文件最后修改时间</td>
</tr>
<tr>
<td align="left">delete()</td>
<td align="left">void</td>
<td align="left">删除文件</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Java--类的上下转型与泛型</title>
    <url>/2019/01/27/Java-%E7%B1%BB%E7%9A%84%E4%B8%8A%E4%B8%8B%E8%BD%AC%E5%9E%8B%E4%B8%8E%E6%B3%9B%E5%9E%8B/</url>
    <content><![CDATA[<h2 id="向上向下转型"><a href="#向上向下转型" class="headerlink" title="向上向下转型"></a>向上向下转型</h2><ul>
<li>向上转型：即子类转换成父类</li>
<li>向下转型：父类转换成子类是<strong>不允许的</strong>,即Java不支持向下转型,<strong>但是</strong>如果该父类本身就是由子类转换而来，则可向下转型</li>
<li>类型转换带来的效用就是<strong>多态</strong></li>
<li>类型转换前后的对象引用的方法皆为子类的方法(即使子类重写过父类的方法)</li>
</ul>
<a id="more"></a>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">animal1</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"You can eat!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">human</span> <span class="keyword">extends</span> <span class="title">animal1</span></span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">"I can eat!"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		human obj1 = <span class="keyword">new</span> human();   </span><br><span class="line">		obj1.eat();     <span class="comment">//调用的是子类的eat();</span></span><br><span class="line">		animal1 obj2 = (animal1) obj1;<span class="comment">//向上转型</span></span><br><span class="line">		obj2.eat();     <span class="comment">//调用的是子类的eat();  </span></span><br><span class="line">		human obj3 = (human) obj2;  <span class="comment">//向下转型</span></span><br><span class="line">		obj3.eat();     <span class="comment">//调用的是子类的eat();  </span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>I can eat!<br>I can eat!<br>I can eat!</p>
</blockquote>
<h2 id="泛型类"><a href="#泛型类" class="headerlink" title="泛型类"></a>泛型类</h2><ul>
<li>泛型类是一种特殊的类。前面说类型的转换只能向上不能向下,这就给会造成一些不必要的麻烦或是安全问题,为此,泛型类应运而生.</li>
<li>语法：class+类名+<T>{}</li>
</ul>
<p>这个<strong>T</strong>可以代表任何类型，看例子：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">man1</span> &lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">	<span class="keyword">public</span> T a;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">man1</span><span class="params">(T a)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.a = a;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">get</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> a;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">human</span></span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//有了泛型便可随意给a赋值，无需担心类型转换带来不安全</span></span><br><span class="line">		man1 obj1 = <span class="keyword">new</span> man1(<span class="number">1</span>);</span><br><span class="line">		man1 obj2 = <span class="keyword">new</span> man1(<span class="number">1.1</span>);</span><br><span class="line">		man1 obj3 = <span class="keyword">new</span> man1(<span class="string">"abc"</span>);</span><br><span class="line">		man1 obj4 = <span class="keyword">new</span> man1(<span class="keyword">true</span>);</span><br><span class="line">		System.out.println(<span class="string">"a="</span>+obj1.get());</span><br><span class="line">		System.out.println(<span class="string">"a="</span>+obj2.get());</span><br><span class="line">		System.out.println(<span class="string">"a="</span>+obj3.get());</span><br><span class="line">		System.out.println(<span class="string">"a="</span>+obj4.get());</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>a=1<br>a=1.1<br>a=abc<br>a=true</p>
</blockquote>
<h2 id="泛型接口"><a href="#泛型接口" class="headerlink" title="泛型接口"></a>泛型接口</h2><ul>
<li>定义一个泛型接口</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> interfase man1 &lt;T&gt;&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> T <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>实现这个接口的方法时，<strong>如果没有泛型实参传入</strong> ，则需要在声明这个类时，声明该类为<strong>泛型类</strong></li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">lass human&lt;T&gt; implements man1&lt;T&gt;&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> T <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ul>
<li>有实参传入时,必须将所有泛型标识换成实参类型</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">human</span> <span class="keyword">implements</span> <span class="title">man1</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">public</span> s = <span class="string">"I can eat!"</span>;</span><br><span class="line">        <span class="keyword">return</span> s;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>














]]></content>
  </entry>
  <entry>
    <title>Java--final和static与常量</title>
    <url>/2019/01/27/Java-final%E5%92%8Cstatic%E4%B8%8E%E5%B8%B8%E9%87%8F/</url>
    <content><![CDATA[<h2 id="static"><a href="#static" class="headerlink" title="static"></a>static</h2><p>static关键字有三个注意点：</p>
<ul>
<li>static变量/方法依赖与类存在，而不是对象，通过类即可访问.</li>
<li>所有的对象实例中，static变量/方法都共享储存在同一空间（栈）.</li>
<li>所有的对象实例中，static变量/方法都共享储存在同一空间（栈）.</li>
</ul>
<a id="more"></a>

<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">	<span class="keyword">static</span> <span class="keyword">int</span> a = <span class="number">2</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		System.out.println(A.a);  <span class="comment">//直接通过类即可引用</span></span><br><span class="line">		A obj1 = <span class="keyword">new</span> A();</span><br><span class="line">		A obj2 = <span class="keyword">new</span> A();</span><br><span class="line">		obj1.a = <span class="number">3</span>;               <span class="comment">//共享存储空间，obj1.a和obj2.a同时改变。</span></span><br><span class="line">		System.out.println(obj2.a);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<blockquote>
<p>2<br>3</p>
</blockquote>
<h2 id="final"><a href="#final" class="headerlink" title="final"></a>final</h2><p>注意点：</p>
<ul>
<li>final类不能被继承</li>
<li>子类不能重写父类中的final方法.</li>
<li>final变量一旦被设定,不可再改变.</li>
<li>final的对象不可变更其指针.</li>
</ul>
<h2 id="常量"><a href="#常量" class="headerlink" title="常量"></a>常量</h2><p>相比C语言Java中没有constant关键字,那么在Java中如何定义一个常量呢？首先一个常量要具备一下条件：</p>
<ul>
<li>不能被修改</li>
<li>只有一份</li>
<li>方便访问</li>
</ul>
<p>知道这三点,在Java中定义一个常量就明确了: public static final A; //A就是一个常量.</p>
<ul>
<li>此外,java中还有一种特殊的常量:接口中定义的变量默认为常量</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line">	String color = <span class="string">"yellow"</span>  <span class="comment">//此为常量</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="常量池"><a href="#常量池" class="headerlink" title="常量池"></a>常量池</h1><p>Java为很多基本类型都建立了常量池，就是说我们不需要自己去定义常量池中的常量</p>
<ul>
<li>常量池如下：</li>
</ul>
<blockquote>
<p>Boolen : true/false<br>Byte,Character : 0-127<br>Short Int Long : -128-127<br>Float Double : 没有常量池</p>
</blockquote>
<p><strong>使用的时候要注意：</strong></p>
<ul>
<li>这些类新建的对象并一定是是静态变量,这会取决与其建立方式</li>
</ul>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Integer a = <span class="number">10</span>;   <span class="comment">//放在栈内存,常量化</span></span><br><span class="line">Integer a = <span class="keyword">new</span> Integer(<span class="number">10</span>);   <span class="comment">//放在堆内存,不会常量化</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java入门</tag>
      </tags>
  </entry>
  <entry>
    <title>Markdown(md)常用语法</title>
    <url>/2019/01/20/Markdown%E5%B8%B8%E7%94%A8%E8%AF%AD%E6%B3%95/</url>
    <content><![CDATA[<h1 id="Markdown简介"><a href="#Markdown简介" class="headerlink" title="Markdown简介"></a>Markdown简介</h1><blockquote>
<p><strong>Markdown即md语法，是一种轻量级标记语言，创始人为约翰·格鲁伯(英语：John Gruber)它允许人们“使用易读易写的纯文本格式编写文档，然后转换成有效的XHTML(或者HTML)档”。该语法对于图片，图表、数学式都有支持，当前许多网站都广泛使用 Markdown 来撰写帮助文档或是用于论坛上发表消息。例如：GitHub、reddit、简书、hexo博客。————维基百科</strong></p>
</blockquote>
<h1 id="常用语法"><a href="#常用语法" class="headerlink" title="常用语法"></a>常用语法</h1><a id="more"></a>

<h2 id="标题"><a href="#标题" class="headerlink" title="标题"></a>标题</h2><p>【语法】：#+空格+内容</p>
<p>【示例】</p>
<pre><code># 一级标题
## 二级标题
### 三级标题
#### 四级标题
##### 五级标题</code></pre><p>【效果】：</p>
<h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h2 id="区块"><a href="#区块" class="headerlink" title="区块"></a>区块</h2><p>md有三种语法都可以实现区块的【效果】<br>第一种 【语法】：四个空格(缩进)+文字</p>
<p>【示例】就是【效果】：</p>
<pre><code>我是区块</code></pre><p>第二种 【语法】：&gt;+文字</p>
<pre><code>&gt;怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了</code></pre><p>【效果】：</p>
<blockquote>
<p>怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了怎么突然没网了</p>
</blockquote>
<p>第三种通常用于写代码，而且每种语言对应不同的高亮风格。<br>[语法]：以java为例</p>
<pre><code><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#96;&#96;&#96;Java</span><br><span class="line">public class hello&#123;</span><br><span class="line">	public static void main&#123;</span><br><span class="line">		system.out.println(&quot;hello world&quot;);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#96;&#96;&#96;</span><br></pre></td></tr></table></figure></code></pre><p>【效果】：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">hello</span></span>&#123;</span><br><span class="line">	<span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> main&#123;</span><br><span class="line">		ystem.out.println(<span class="string">"hello world"</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="强调"><a href="#强调" class="headerlink" title="强调"></a>强调</h2><p>【示例】：</p>
<pre><code>*斜体*（中间有空格）
**加粗**
***斜体加粗***</code></pre><p>【效果】：<br><em>斜体</em><br><strong>加粗</strong><br><strong><em>斜体加粗</em></strong></p>
<h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>【示例】：</p>
<pre><code>![]()
![这里写图片说明](这里写图片地址)
如：
![Iron Man](https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1577114320
784&amp;di=0169979de7c056d71d67f484a887b0ec&amp;imgtype=0&amp;src=http%3A%2F%2Fimage.samanlehua.com%2Fnews%2F12%2F352312.jpg)</code></pre><p>【效果】：<br><img src="https://timgsa.baidu.com/timg?image&quality=80&size=b9999_10000&sec=1577114320784&di=0169979de7c056d71d67f484a887b0ec&imgtype=0&src=http%3A%2F%2Fimage.samanlehua.com%2Fnews%2F12%2F352312.jpg" alt="Iron Man"></p>
<pre><code>附：&lt;div style=&quot;width: 200px; margin: auto&quot;&gt;![图片说明](图片地址)&lt;/div&gt;     //css语法设置图片（可设置图片高度和宽度）</code></pre><h2 id="插入链接"><a href="#插入链接" class="headerlink" title="插入链接"></a>插入链接</h2><p>【示例】：</p>
<pre><code>[]()
[百度](http://baidu.com/)</code></pre><p>【效果】：<br><a href="http://baidu.com/" target="_blank" rel="noopener">百度</a></p>
<h2 id="分割线"><a href="#分割线" class="headerlink" title="分割线"></a>分割线</h2><p>【示例】：</p>
<pre><code>---
***
- - - -</code></pre><p>【效果】：</p>
<hr>
<hr>
<hr>
<h2 id="列表"><a href="#列表" class="headerlink" title="列表"></a>列表</h2><p>【示例】：</p>
<pre><code>* 文字（中间有空格）
- 文字
+ 文字</code></pre><p>无序列表：</p>
<ul>
<li>文字</li>
</ul>
<ul>
<li>文字</li>
</ul>
<ul>
<li>文字</li>
</ul>
<h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><p>【示例】：</p>
<pre><code>时间|学习|生活                 //表格首部
:---|:---:|---:                //冒号在哪边就往哪边对齐，两边都有冒号则居中
1.21|Java1-100页|慢跑5000米    //表格内容，可以往下增加
1.22||杭州之旅</code></pre><p>【效果】：</p>
<table>
<thead>
<tr>
<th align="left">时间</th>
<th align="center">学习</th>
<th align="right">生活</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1.21</td>
<td align="center">Java1-100页</td>
<td align="right">慢跑5000米</td>
</tr>
<tr>
<td align="left">1.22</td>
<td align="center"></td>
<td align="right">杭州之旅</td>
</tr>
</tbody></table>
<h2 id="换行"><a href="#换行" class="headerlink" title="换行"></a>换行</h2><pre><code>【语法】：文字后+两个空格+回车，即有换行效果。</code></pre><h1 id="编辑工具"><a href="#编辑工具" class="headerlink" title="编辑工具"></a>编辑工具</h1><p><a href="https://dillinger.io/" target="_blank" rel="noopener">dillinger </a> 功能强大，来源国外，不太稳定<br><a href="http://mahua.jser.me/" target="_blank" rel="noopener">mahua</a>在线编辑，界面一般<br><a href="https://notepad-plus-plus.org/download/v7.6.2.html" target="_blank" rel="noopener">Notepad++</a> 大众编辑器，线下编辑，界面一般</p>
]]></content>
      <categories>
        <category>hexo博客搭建</category>
      </categories>
      <tags>
        <tag>md</tag>
      </tags>
  </entry>
  <entry>
    <title>大一寒假</title>
    <url>/2019/01/15/%E5%A4%A7%E4%B8%80%E5%AF%92%E5%81%87/</url>
    <content><![CDATA[<ul>
<li><strong>大学1/8匆匆过去了。这个学期做了什么呢。C语言。认识新的同学，舍友…进了双创学了一点算法。然后进了移动组。还进了一个神秘的查老师课的部门。</strong></li>
<li><strong>认识了很多NB的人，知道自己还需要很多的努力。</strong><a id="more"></a>

</li>
</ul>
<table>
<thead>
<tr>
<th align="left">时间</th>
<th align="center">编程</th>
<th align="center">学习</th>
<th align="center">驾照</th>
<th align="right">生活</th>
</tr>
</thead>
<tbody><tr>
<td align="left">1.18</td>
<td align="center">今日任务exe</td>
<td align="center">Java 0-100页</td>
<td align="center"></td>
<td align="right">寒假第一天</td>
</tr>
<tr>
<td align="left">1.19</td>
<td align="center"></td>
<td align="center">Java核心技术 mooc课</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">1.20</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">科一0-1500道题目</td>
<td align="right"></td>
</tr>
<tr>
<td align="left">1.21</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">科一98分过啦    清远之行</td>
<td align="right"></td>
</tr>
<tr>
<td align="left">1.22</td>
<td align="center">LeetCode两道简单题</td>
<td align="center"></td>
<td align="center">科二未知</td>
<td align="right"></td>
</tr>
<tr>
<td align="left">1.23</td>
<td align="center"></td>
<td align="center">Java 100-290页</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">1.24</td>
<td align="center"></td>
<td align="center">《Java入门》看一遍 Android studio安装</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">1.25</td>
<td align="center">Android hello word!    Java多线程与网络通信</td>
<td align="center"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">1.26</td>
<td align="center">JavaSocket实现</td>
<td align="center">Android活动探究</td>
<td align="center"></td>
<td align="right">宅一天</td>
</tr>
<tr>
<td align="left">1.27</td>
<td align="center"></td>
<td align="center">Java泛型类    Android初级UI基本控件</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">1.28</td>
<td align="center"></td>
<td align="center">Android活动探究,JavaI/O流</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">1.29</td>
<td align="center"></td>
<td align="center">Android简单UI</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">1.30</td>
<td align="center"></td>
<td align="center">Android简单UI</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">1.31</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="right">休息</td>
</tr>
<tr>
<td align="left">2.1</td>
<td align="center"></td>
<td align="center">美化博客</td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">2.2</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="right">回老家</td>
</tr>
<tr>
<td align="left">2.3</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="right">过年</td>
</tr>
<tr>
<td align="left">2.6</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="right">过年</td>
</tr>
<tr>
<td align="left">2.7</td>
<td align="center">i note-标题</td>
<td align="center"></td>
<td align="center"></td>
<td align="right">过年浪</td>
</tr>
<tr>
<td align="left">2.8</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="right">过年浪</td>
</tr>
<tr>
<td align="left">2.10</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="right">过年浪</td>
</tr>
<tr>
<td align="left">2.11</td>
<td align="center"></td>
<td align="center"></td>
<td align="center"></td>
<td align="right">教妹妹做习题</td>
</tr>
<tr>
<td align="left">2.12</td>
<td align="center">i note-文本保存部分</td>
<td align="center">Android–文件存储</td>
<td align="center"></td>
<td align="right">教妹妹做习题</td>
</tr>
<tr>
<td align="left">2.13</td>
<td align="center">i note-文本保存部分</td>
<td align="center"></td>
<td align="center"></td>
<td align="right">教妹妹做习题</td>
</tr>
<tr>
<td align="left">2.14</td>
<td align="center">i note-拍照保存部分</td>
<td align="center"></td>
<td align="center"></td>
<td align="right">电影</td>
</tr>
<tr>
<td align="left">2.15</td>
<td align="center">i note-拍照保存部分</td>
<td align="center"></td>
<td align="center"></td>
<td align="right">依旧浪</td>
</tr>
<tr>
<td align="left">2.16</td>
<td align="center">照片滚动卡顿懵一天</td>
<td align="center"></td>
<td align="center"></td>
<td align="right">心情不好,不想出去浪了</td>
</tr>
<tr>
<td align="left">2.17</td>
<td align="center">i note-拍照保存部分完毕</td>
<td align="center"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">2.18</td>
<td align="center">i note-调用相册保存部分完毕</td>
<td align="center"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">2.19</td>
<td align="center">i 便签—删除与修改功能</td>
<td align="center"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">2.20</td>
<td align="center">i 便签—界面UI设计</td>
<td align="center"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">2.20</td>
<td align="center">i 便签—界面UI设计</td>
<td align="center"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">2.21</td>
<td align="center">i 便签—界面UI设计</td>
<td align="center"></td>
<td align="center"></td>
<td align="right"></td>
</tr>
<tr>
<td align="left">2.22</td>
<td align="center"></td>
<td align="center"></td>
<td align="center">坐高铁到学校</td>
<td align="right"></td>
</tr>
</tbody></table>
]]></content>
      <tags>
        <tag>生活</tag>
      </tags>
  </entry>
  <entry>
    <title>大一上最后一的C</title>
    <url>/2019/01/15/%E5%A4%A7%E4%B8%80%E4%B8%8A%E6%9C%80%E5%90%8E%E4%B8%80%E7%9A%84C/</url>
    <content><![CDATA[<h2 id="大一上在今天高数考完那一刻，结束啦！"><a href="#大一上在今天高数考完那一刻，结束啦！" class="headerlink" title="大一上在今天高数考完那一刻，结束啦！"></a>大一上在今天高数考完那一刻，结束啦！</h2><ul>
<li><strong>这段时间就敲了两个C，考勤管理系统(链表实现)，俄罗斯方块(这个比较渣，bug多，只实现了基本功能),不过都是用一天就写好了。还是有点进步，毕竟之前的一个贪吃蛇都用了一个多星期。hh..</strong></li>
</ul>
<hr>
<p><a href="https://github.com/shine56/-C-" target="_blank" rel="noopener">代码https://github.com/shine56/-C-</a></p>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言-宿舍管理系统</title>
    <url>/2018/12/28/C%E8%AF%AD%E8%A8%80-%E5%AE%BF%E8%88%8D%E7%AE%A1%E7%90%86%E7%B3%BB%E7%BB%9F/</url>
    <content><![CDATA[<h2 id="还有3天2018真的要过去啦！"><a href="#还有3天2018真的要过去啦！" class="headerlink" title="还有3天2018真的要过去啦！!"></a>还有3天2018真的要过去啦！!</h2><ul>
<li><p><strong>宿舍管理系统，前几天写完了，也是第一次写过千的代码（刚好过1000，hh）。</strong></p>
</li>
<li><p><strong>C语言书上也有几个推荐写的系统，但是总感觉按照书本来，好像有点low。。刚好看到查寝的人，在一间一见宿舍查晚归舍友也在埋怨宿舍保修的事，要是有一个通过账户登录的实时反馈的系统因该不错，当然咯，这是前端的人搞的事情。不过，我用C写一个线下的总可以吧。虽然没啥实际意义（不过就现在的水平又能写出什么有意义的事呢）。</strong></p>
</li>
<li><p><strong>写完了，尽管不咋地，不过也学了一些，第一次用文件和结构体的知识，还有一些画面的控制技巧。小收获吧。</strong></p>
</li>
</ul>
<hr>
<p><a href="https://github.com/shine56/-C-" target="_blank" rel="noopener">代码贴上https://github.com/shine56/-C-</a></p>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>C语言小游戏-贪吃蛇</title>
    <url>/2018/12/11/C%E8%AF%AD%E8%A8%80%E5%B0%8F%E6%B8%B8%E6%88%8F-%E8%B4%AA%E5%90%83%E8%9B%87/</url>
    <content><![CDATA[<h2 id="2018最后一月"><a href="#2018最后一月" class="headerlink" title="2018最后一月"></a>2018最后一月</h2><ul>
<li><strong>这几天琐碎的事情很多.今天第一次大学考试（没怎么复习， 希望不会挂。。）</strong></li>
<li><strong>历史3000字， 信导2000字，思科作业， 还有604这边的java，课设和博客搭建和美化（看起来不难， 但是我还是折腾了几天~）</strong></li>
<li><strong>代码没怎么碰， 就写了个最简单的printf版的贪吃蛇，毕竟是我第一次写超过300行的代码，还是小记录一下。</strong><a id="more"></a></li>
</ul>
<hr>
<ul>
<li><strong>这个贪吃蛇没用到链表，就一个二维数组， 纯printf。第一次接触到了句柄，和一些没见过的函数，windows.h库函数，kbhit(),rand()等。还是有点收获！<br>这也是第一次看到冰冷的字符活起来，玩着自己写的游戏，有点小开心吧。</strong></li>
</ul>
<hr>
<p><a href="https://github.com/shine56/-C-" target="_blank" rel="noopener">贪吃蛇代码https://github.com/shine56/-C-</a></p>
]]></content>
      <tags>
        <tag>C语言</tag>
      </tags>
  </entry>
  <entry>
    <title>最美2018</title>
    <url>/2018/12/04/%E6%9C%80%E7%BE%8E2018/</url>
    <content><![CDATA[<h1 id="最美2018"><a href="#最美2018" class="headerlink" title="最美2018"></a>最美2018</h1><blockquote>
<p>一半属于高中<br>一半属于大学<br>美到我们不舍得忘记<a id="more"></a><br>一月份的迷茫<br>二月份的黑白颠倒<br>三月份的百天倒计时<br>四月份的口语考<br>五月份的极度紧张<br>六月份的高考疯狂<br>七月份的同学聚会旅游<br>八月份的失望惆怅<br>九月份的期待与迷茫<br>十月份的别扭与陌生<br>十一月份的习惯<br>十二月份的淡然<br>唯纯粹与热爱不可辜负！<br>匆匆这年<br>向我们回不去的这一年致敬！</p>
</blockquote>
<p><img src="https://cdn.pixabay.com/photo/2019/12/17/17/58/night-4702174_960_720.jpg" alt=""></p>
]]></content>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2018/12/04/hello-world/</url>
    <content><![CDATA[<h1 id="搭建自己第一个博客，感觉还行"><a href="#搭建自己第一个博客，感觉还行" class="headerlink" title="搭建自己第一个博客，感觉还行~"></a>搭建自己第一个博客，感觉还行~</h1><p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>about</title>
    <url>/about/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>tags</title>
    <url>/tags/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>categories</title>
    <url>/categories/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>archives</title>
    <url>/archives/index.html</url>
    <content><![CDATA[]]></content>
  </entry>
</search>
