<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Shine56&#39;s blog</title>
  
  <subtitle>唯纯粹与热爱不可辜负。</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-10-15T10:29:55.924Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ZQL</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Android修改状态栏</title>
    <link href="http://yoursite.com/2019/10/04/%E4%BF%AE%E6%94%B9%E7%8A%B6%E6%80%81%E6%A0%8F/"/>
    <id>http://yoursite.com/2019/10/04/修改状态栏/</id>
    <published>2019-10-04T09:01:47.000Z</published>
    <updated>2019-10-15T10:29:55.924Z</updated>
    
    <content type="html"><![CDATA[<h5 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h5><p>这里的处理都是Android5.0以上的。</p><h2 id="修改状态栏颜色"><a href="#修改状态栏颜色" class="headerlink" title="修改状态栏颜色"></a>修改状态栏颜色</h2><p><img src="https://img-blog.csdnimg.cn/20191004165832122.png" alt="在这里插入图片描述"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Window window = activity.getWindow();</span><br><span class="line">window.setStatusBarColor(Color.MAGENTA);</span><br></pre></td></tr></table></figure></p><h2 id="隐藏状态栏"><a href="#隐藏状态栏" class="headerlink" title="隐藏状态栏"></a>隐藏状态栏</h2><p><img src="https://img-blog.csdnimg.cn/20191004165449215.png" alt="在这里插入图片描述"></p><ul><li><p>法一</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Window window = getWindow();</span><br><span class="line">View decorView = window.getDecorView();</span><br><span class="line">decorView.setSystemUiVisibility(View.SYSTEM_UI_FLAG_FULLSCREEN);</span><br></pre></td></tr></table></figure></li><li><p>法二</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Window window = activity.getWindow();</span><br><span class="line">window.setFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN,WindowManager.LayoutParams.FLAG_FULLSCREEN);</span><br></pre></td></tr></table></figure></li><li><h2 id="半透明状态栏"><a href="#半透明状态栏" class="headerlink" title="半透明状态栏"></a>半透明状态栏</h2><p><img src="https://img-blog.csdnimg.cn/20191004165945790.png" alt="在这里插入图片描述"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Window window = activity.getWindow();</span><br><span class="line">window.addFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);</span><br></pre></td></tr></table></figure></li></ul><h2 id="全透明状态栏实现沉浸式"><a href="#全透明状态栏实现沉浸式" class="headerlink" title="全透明状态栏实现沉浸式"></a>全透明状态栏实现沉浸式</h2><p><img src="https://img-blog.csdnimg.cn/20191004170018316.png" alt="在这里插入图片描述"><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Window window = activity.getWindow();</span><br><span class="line"><span class="comment">/*如果之前是办透明模式，要加这一句需要取消半透明的Flag</span></span><br><span class="line"><span class="comment">window.clearFlags(WindowManager.LayoutParams.FLAG_TRANSLUCENT_STATUS);*/</span></span><br><span class="line">window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_STABLE |View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN);</span><br><span class="line">window.setStatusBarColor(Color.TRANSPARENT);</span><br></pre></td></tr></table></figure></p><h2 id="修改状态栏字体颜色"><a href="#修改状态栏字体颜色" class="headerlink" title="修改状态栏字体颜色"></a>修改状态栏字体颜色</h2><ul><li><p>设置状态栏图标和文字颜色为黑色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Window window = activity.getWindow();</span><br><span class="line">window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN | View.SYSTEM_UI_FLAG_LIGHT_STATUS_BAR);</span><br></pre></td></tr></table></figure></li><li><p>设置状态栏图标和文字颜色为白色</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">window.getDecorView().setSystemUiVisibility(View.SYSTEM_UI_FLAG_LAYOUT_FULLSCREEN|View.SYSTEM_UI_FLAG_LAYOUT_STABLE);</span><br></pre></td></tr></table></figure></li></ul><p>参考大大博客<br><a href="https://www.cnblogs.com/ldq2016/p/8353190.html" target="_blank" rel="noopener">https://www.cnblogs.com/ldq2016/p/8353190.html</a><br><a href="https://www.jianshu.com/p/31c4b324894e" target="_blank" rel="noopener">https://www.jianshu.com/p/31c4b324894e</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;效果图&quot;&gt;&lt;a href=&quot;#效果图&quot; class=&quot;headerlink&quot; title=&quot;效果图&quot;&gt;&lt;/a&gt;效果图&lt;/h5&gt;&lt;p&gt;这里的处理都是Android5.0以上的。&lt;/p&gt;
&lt;h2 id=&quot;修改状态栏颜色&quot;&gt;&lt;a href=&quot;#修改状态栏颜色&quot; clas
      
    
    </summary>
    
    
      <category term="Android学习" scheme="http://yoursite.com/tags/Android%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>Android自定义view学习(一)</title>
    <link href="http://yoursite.com/2019/09/15/Android%E8%87%AA%E5%AE%9A%E4%B9%89view%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/09/15/Android自定义view学习/</id>
    <published>2019-09-15T13:41:27.000Z</published>
    <updated>2019-09-22T13:05:24.190Z</updated>
    
    <content type="html"><![CDATA[<h3 id="为什么要自定义View？"><a href="#为什么要自定义View？" class="headerlink" title="为什么要自定义View？"></a>为什么要自定义View？</h3><p>系统配置的View满足不了我们的需求，我们需要针对业务制作一个自己的View。</p><h3 id="怎么自定义View？步骤是啥？"><a href="#怎么自定义View？步骤是啥？" class="headerlink" title="怎么自定义View？步骤是啥？"></a>怎么自定义View？步骤是啥？</h3><p> 我是小白啥不懂呀，怎么去自定义一个自己的view呢？下面跟着我一步步先定义一个正方形的view试试看。</p><h5 id="在values目录下新建一个firs-xml文件-编写内容如下："><a href="#在values目录下新建一个firs-xml文件-编写内容如下：" class="headerlink" title="在values目录下新建一个firs.xml文件,编写内容如下："></a>在values目录下新建一个firs.xml文件,编写内容如下：</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">declare-styleable</span> <span class="attr">name</span>=<span class="string">"first_test"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">declare-styleable</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这个是什么呢？这个是我们给自定义View设置的<strong>属性文件</strong>，但是我们现在只是把styleable命名为first_test，其他一个属性也没加。后面会讲</p><h5 id="新建一个java文件继承于View"><a href="#新建一个java文件继承于View" class="headerlink" title="新建一个java文件继承于View"></a>新建一个java文件<strong>继承于View</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstTest</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FirstTest</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line">     <span class="function"><span class="keyword">public</span> <span class="title">FirstTest</span><span class="params">(Context context, AttributeSet first)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context, first);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里之重写了View的两个<strong>构造函数</strong>（View不止这两个构造函数，但是这两个是必写的，其他的后面会讲）</p><h5 id="然后把我们的view加入我们的布局当中"><a href="#然后把我们的view加入我们的布局当中" class="headerlink" title="然后把我们的view加入我们的布局当中"></a>然后把我们的view加入我们的布局当中</h5><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.example.a73233.test.FirstTest</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"200dp"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:background</span>=<span class="string">"#00BCD4"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br></pre></td></tr></table></figure><p>这里我们给他设置了三个系统属性，宽度和高度，以及背景颜色。</p><p>是的，这样自定义view的初步工作就完成了。但是显然这个View是空空的，啥也没有。。。好，我们回到Java文件给他搞点东西。<br>我们看到重写了View的一个<strong>构造函数</strong>，但显然是不够的。那么我们还要重写什么函数呢？如下：</p><h5 id="onMeasure"><a href="#onMeasure" class="headerlink" title="onMeasure()"></a><strong>onMeasure()</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FirstTest</span> <span class="keyword">extends</span> <span class="title">View</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">FirstTest</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>onMeasure() 函数的功能负责<strong>测量我们View的宽高尺寸</strong> 这里出现了两个参数<strong>widthMeasureSpec</strong> 和<strong>heightMeasureSpec</strong> 。</p><p>这两个看着有点眼熟的是什么东东？他们其实就是我们从刚刚的布局中拿到的<strong>宽度和高度</strong> 。重点来了，以heightMeasureSpec为例，虽然它是<strong>一个参数</strong>，但是它其实携带了<strong>两个量</strong>，其一为我们拿到的view的高度，其二为<strong>测量模式</strong>。</p><p>我们用起来是这样的：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> heightSize = MeasureSpec.getMode(heightMeasureSpec);<span class="comment">//取出的高度</span></span><br><span class="line"><span class="keyword">int</span> heightMode = MeasureSpec.getMode(heightMeasureSpec);<span class="comment">//取出的测量模式</span></span><br></pre></td></tr></table></figure></p><p>这个测量模式有三种，如下表：</p><table><thead><tr><th style="text-align:center">测量模式</th><th style="text-align:center">二进制数值</th><th style="text-align:center">描述</th></tr></thead><tbody><tr><td style="text-align:center">UNSPECIFIED</td><td style="text-align:center">00</td><td style="text-align:center">默认值，父控件没有给子view任何限制，子View可以设置为任意大小。</td></tr><tr><td style="text-align:center">EXACTLY</td><td style="text-align:center">01</td><td style="text-align:center">表示父控件已经确切的指定了子View的大小。</td></tr><tr><td style="text-align:center">AT_MOST</td><td style="text-align:center">10</td><td style="text-align:center">表示子View具体大小没有尺寸限制，但是存在上限，上限一般为父View大小。</td></tr></tbody></table><p>好了，理论搞完了，因为我们要做的是一个正方形的view ,我们添加多一点代码来完成这个onMeasure() 函数。代码比较简单。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"> <span class="function"><span class="keyword">private</span> <span class="keyword">int</span> <span class="title">getSize</span><span class="params">(<span class="keyword">int</span> defaultSize, <span class="keyword">int</span> measureSpec)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> mySize = defaultSize;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> mode = MeasureSpec.getMode(measureSpec);</span><br><span class="line">        <span class="keyword">int</span> size = MeasureSpec.getSize(measureSpec);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">switch</span> (mode) &#123;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.UNSPECIFIED: &#123;</span><br><span class="line">                mySize = defaultSize;<span class="comment">//默认大小</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.AT_MOST: &#123;</span><br><span class="line">                mySize = size;      <span class="comment">//取最大值</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">case</span> MeasureSpec.EXACTLY: &#123;</span><br><span class="line">                mySize = size;   <span class="comment">//固定值不要改变</span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mySize;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onMeasure</span><span class="params">(<span class="keyword">int</span> widthMeasureSpec, <span class="keyword">int</span> heightMeasureSpec)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onMeasure(widthMeasureSpec, heightMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> heightSize = getSize(<span class="number">200</span>,heightMeasureSpec);</span><br><span class="line">    <span class="keyword">int</span> widthtSize = getSize(<span class="number">200</span>,widthMeasureSpec);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(heightSize &gt; widthtSize)&#123;</span><br><span class="line">        heightSize = widthtSize;</span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">        widthtSize = heightSize;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    setMeasuredDimension(widthtSize,heightSize);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>好了到这里我们可以运行一下了。<br><img src="https://img-blog.csdnimg.cn/20190915185650619.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYxOTg1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p>ok,正方形的view。那么问题又来了，如果我们想定义的是一个圆形的View呢？这就涉及到下面重写的这个函数了。</p><h5 id="onDraw"><a href="#onDraw" class="headerlink" title="onDraw"></a><strong>onDraw</strong></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure><p>接下来重写的这个onDraw函数大有来头，显而易见，上面我们把view的宽高测出来了，这个函数就把我们想要的效果画出来。<br>我们直接上代码（看注释）：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">   <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDraw</span><span class="params">(Canvas canvas)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">super</span>.onDraw(canvas);</span><br><span class="line"></span><br><span class="line">       Paint paint = <span class="keyword">new</span> Paint();  <span class="comment">//新建一个画笔对象</span></span><br><span class="line">       paint.setColor(Color.RED);  <span class="comment">//把画笔设置成黑色</span></span><br><span class="line">       paint.setStrokeWidth(<span class="number">10f</span>);   <span class="comment">//设置画笔粗细</span></span><br><span class="line">       paint.setStyle(Paint.Style.FILL);  <span class="comment">//设置画笔为填充模式</span></span><br><span class="line"></span><br><span class="line">       canvas.drawCircle(<span class="number">300</span>,<span class="number">300</span>,<span class="number">300</span>, paint);<span class="comment">//开始绘制圆形</span></span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure></p><p><img src="https://img-blog.csdnimg.cn/20190915185545555.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYxOTg1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>在这里你可以发现明明onDraw函数画的是一个圆，怎么刚才的正方形还在？那是因为在onMeasure()函数我们确定了控件大小（占地面积），但是画圆的时候没用完，所以还能看见我们在<strong>布局文件设定的背景颜色</strong>，我们把背景色去掉就只剩下一个圆了。<br><img src="https://img-blog.csdnimg.cn/20190915190325978.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MjYxOTg1Ng==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h3 id="自定义view就这样？"><a href="#自定义view就这样？" class="headerlink" title="自定义view就这样？"></a>自定义view就这样？</h3><p>怎么可能？上面只是画一个圆来简单的介绍了自定义一个view的步骤。</p><ul><li>还记得我们一开始新建了一个view的firs.xml的文件吧，我没还可以给这个view添加更多的属性。<a href="https://www.jianshu.com/p/8844de6addb3" target="_blank" rel="noopener">看这里</a></li><li>还有我们在重写view的onDraw()函数的时候，设置了画笔的属性，那么画笔还有那些属性呢？</li><li>除了圆，我们还可以画其他的图形，怎么画呢?<a href="https://www.gcssloop.com/customview/Canvas_BasicGraphics" target="_blank" rel="noopener">看这里</a></li></ul><p>博客参考各种网络资源，侵删，若有错误，恳请指正。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;为什么要自定义View？&quot;&gt;&lt;a href=&quot;#为什么要自定义View？&quot; class=&quot;headerlink&quot; title=&quot;为什么要自定义View？&quot;&gt;&lt;/a&gt;为什么要自定义View？&lt;/h3&gt;&lt;p&gt;系统配置的View满足不了我们的需求，我们需要针对业务制作一
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>学习Activity生命周期</title>
    <link href="http://yoursite.com/2019/07/29/%E5%AD%A6%E4%B9%A0Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>http://yoursite.com/2019/07/29/学习Activity生命周期/</id>
    <published>2019-07-29T05:15:19.000Z</published>
    <updated>2019-07-29T05:20:49.319Z</updated>
    
    <content type="html"><![CDATA[<h2 id="回调方法介绍"><a href="#回调方法介绍" class="headerlink" title="回调方法介绍"></a>回调方法介绍</h2><p><strong>说起Activity的生命周期想必离不开一幅图</strong><br><img src="https://imgconvert.csdnimg.cn/aHR0cHM6Ly91cGxvYWQtaW1hZ2VzLmppYW5zaHUuaW8vdXBsb2FkX2ltYWdlcy8xMjIzOTgxNy01N2JiMzRiYmYyMDE4NTNkLnBuZw" alt=""></p><table><thead><tr><th style="text-align:center">方法。。。。。</th><th style="text-align:center">描述</th><th style="text-align:center">常用情景</th></tr></thead><tbody><tr><td style="text-align:center">onCreate()</td><td style="text-align:center">当活动第一次创建时调用</td><td style="text-align:center">初始化数据，加载布局，绑定事件等</td></tr><tr><td style="text-align:center">onStart()</td><td style="text-align:center">活动被启动时调用</td><td style="text-align:center">略</td></tr><tr><td style="text-align:center">onRestart()</td><td style="text-align:center">活动停止后被重启时调用</td><td style="text-align:center">略</td></tr><tr><td style="text-align:center">onResume()</td><td style="text-align:center">活动用户可见时，即开始与用户交互时调用，此时活动必位于栈顶</td><td style="text-align:center">略</td></tr><tr><td style="text-align:center">onPause()</td><td style="text-align:center">启动或者恢复另外一个活动时调用</td><td style="text-align:center">信息持久化存储操作，停止消耗CPU资源等执行熟读要快，否则影响下一活动使用</td></tr><tr><td style="text-align:center">onStop()</td><td style="text-align:center">活动<strong>完全</strong>不可见时调用</td><td style="text-align:center">因为活动界面会被覆盖或销毁，所有要储存重要信息</td></tr><tr><td style="text-align:center">onDestory()</td><td style="text-align:center">活动被销毁即出栈时被调用</td><td style="text-align:center">数据回收，资源释放等</td></tr><tr><td style="text-align:center">onSaveInstanceState()</td><td style="text-align:center">活动被异常停止，可以用Bundle保存数据，可以在活动再次创建时的onCreate()方法中使用保存下来的数据</td><td style="text-align:center">防止活动异常停止导致的数据丢失</td></tr></tbody></table><ul><li>与用户交互（前台）时期：onResume() -&gt; onPause()</li><li>可见到不可见时期（对应用而言）：onStart() -&gt; onStop()</li><li><p>启动到销毁时期：onCreat() -&gt; onDestory()</p><h2 id="Activity的启动方式"><a href="#Activity的启动方式" class="headerlink" title="Activity的启动方式"></a>Activity的启动方式</h2><p>  首先要知道的是活动的管理用的是Task，Task是返回栈。<br>  当活动创建时压栈，活动被销毁时出栈。活动的启动方式一共有四种。</p></li><li><p><strong>standard</strong><br>这种模式是活动默认的启动方式。特点：每创建一个活动，则一个活动压栈，不管栈中是否已经存在该活动的实例。</p></li><li><strong>singleTop</strong><br>这种模式呢不会重复创建栈顶的活动，就是说当新创建的活动与栈顶的活动一样时不会重复创建，而是直接调用栈顶的活动。</li><li><strong>singleTask</strong><br>这种模式可以让整个程序上下文只存在一个实例，就是说，创建新的实例前会判断栈中是否已经存在相同的实例，倘若已经存在，则不会新创实例。</li><li><strong>singlelnstance</strong><br>指定这种模式的活动，会启动一个新的返回栈来管理该活动。无论哪个程序访问该活动都共用同一个返回栈</li></ul><p><strong>那个怎么指定一个活动的启动方式呢</strong><br>在AndroidManifest.xml中的activity标签中指定，例如：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">android:launchMode</span>=<span class="string">"singleTask"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="举例"><a href="#举例" class="headerlink" title="举例"></a>举例</h2><ul><li><p>启动活动1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">活动1执行了: onCreate()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br></pre></td></tr></table></figure></li><li><p>活动1跳转活动2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">活动1执行了: onPause()</span><br><span class="line">活动2执行了: onCreate()</span><br><span class="line">活动2执行了: onStart()</span><br><span class="line">活动2执行了: onResume()</span><br><span class="line">活动1执行了: onStop()</span><br><span class="line">活动1执行了: onSaveInstanceState(Bundle outState)</span><br></pre></td></tr></table></figure></li><li><p>活动2点击back返回活动1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">活动2执行了: onPause()</span><br><span class="line">活动1执行了: onRestart()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br><span class="line">活动2执行了: onStop()</span><br><span class="line">活动2执行了: onDestroy()</span><br></pre></td></tr></table></figure></li></ul><p>1、可见活动不可见了暂时不会被销毁，但是点击back会。<br>2、从活动1启动活动2，活动1的  <strong>onSaveInstanceState()</strong>  会被执行；但是按back键返回活动1，活动2的  <strong>onSaveInstanceState()</strong>  并不会执行，即使活动2已经被销毁。<br>3、从活动1启动活动2，先执行活动1的  <strong>onPause()</strong>  然后创建活动2，再执行活动1的 <strong>onStop()</strong>，因此  <strong>onPause()</strong>  的操作不宜过于耗时，否则影响活动2的启动。</p><ul><li><p>熄屏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">活动1执行了: onPause()</span><br><span class="line">活动1执行了: onStop()</span><br><span class="line">活动1执行了: onSaveInstanceState(Bundle outState)</span><br></pre></td></tr></table></figure></li><li><p>再亮屏</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">活动1执行了: onRestart()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br></pre></td></tr></table></figure></li><li><p>点击home键</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">活动1执行了: onPause()</span><br><span class="line">活动1执行了: onStop()</span><br><span class="line">活动1执行了: onSaveInstanceState(Bundle outState)</span><br></pre></td></tr></table></figure></li><li><p>再打开app</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">活动1执行了: onRestart()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br></pre></td></tr></table></figure></li></ul><p>熄屏和返回home，都不会销毁该活动，再次打开app会被重启，执行 <strong>onRestart()</strong> 方法。</p><ul><li>竖屏旋转为横屏 或者 横屏转竖屏<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">活动1执行了: onPause()</span><br><span class="line">活动1执行了: onStop()</span><br><span class="line">活动1执行了: onSaveInstanceState(Bundle outState)</span><br><span class="line">活动1执行了: onDestroy()</span><br><span class="line">活动1执行了: onCreate()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br></pre></td></tr></table></figure></li></ul><p>屏幕方向的改变，会<strong>销毁</strong>当前活动，并且<strong>新创建</strong>一个新的活动。</p><ul><li>横屏状态下熄屏再亮屏 或者 横屏状态点击home键再点开app<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">活动1执行了: onPause()</span><br><span class="line">活动1执行了: onStop()</span><br><span class="line">活动1执行了: onSaveInstanceState(Bundle outState)</span><br><span class="line">活动1执行了: onDestroy()</span><br><span class="line">活动1执行了: onCreate()</span><br><span class="line">活动1执行了: onStart()</span><br><span class="line">活动1执行了: onResume()</span><br></pre></td></tr></table></figure></li></ul><p>横屏状态下熄屏或者横屏状态点击home键，都会销毁当前活动，再次打开时新创建一个活动，此时屏幕也变成了竖屏状态。</p><p>补充：默认情况下，<strong>系统配置发生改变时</strong>，如屏幕旋转，Activity是会被重新创建的，当然你想要不重建Activity也行，AndroidManifest的Activity标签下有一个属性<strong>android：configChanges</strong>，该属性指定的系统配置即使改变了，Activity也不会被销毁重建。如，我不希望屏幕方向改变而重新创建活动则：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:configChanges</span>=<span class="string">"orientation"</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>该属性常用的值有：<br>1、orientation：屏幕方向发生改变<br>2、locale：设备的本地位置发生了改变，一般指切换了系统语言；<br>3、keyboardHidden：键盘的可访问性发生了改变，例如用户调出了键盘。</p><pre><code>最后说一下onSaveInstanceState()这个正常finifh一个活动方法不会被执行的,其它情况停止一个活动则会执行。我的理解，onSaveInstanceState()是防止某些数据在Activity停止时丢失的（用Bundle存起来），如果该活动还有可能被重启或重新创建则会执行onSaveInstanceState()，以便恢复上回的数据，但是正常finish一个活动，说明该活动已经正常结束了，我不会再用它了，则不会执行onSaveInstanceState()。</code></pre><p>其实有兴趣还可以对Activity整个周期的的实现源码看一遍，这里不多说了，从<a href="https://www.jianshu.com/p/ee6a0e45bbec" target="_blank" rel="noopener">https://www.jianshu.com/p/ee6a0e45bbec</a>可知一下几点：</p><ul><li>activity的生命周期是通过handler消息来控制的；</li><li>activity的实例创建是通过反射来实现的；</li><li>在activity onResume生命周期后，才将布局view绘制添加到系统布局中并显示给用户；</li><li>在activity onDestory生命周期后，只是将window中的view，DecorView移除并置为null，并没有将activity实例置为null，activity实例仍然在内存中，如果在gc时还有持有该activity的引用就会造成内存泄露，也就是说activity onDestory后只是页面的销毁，并不代表当前activity实例的销毁。<h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2></li><li>《第一行代码》</li><li>博客<a href="https://www.jianshu.com/p/b5a72a741025" target="_blank" rel="noopener">https://www.jianshu.com/p/b5a72a741025</a></li><li>博客<a href="https://www.jianshu.com/p/ec50675ed116" target="_blank" rel="noopener">https://www.jianshu.com/p/ec50675ed116</a><br>如有错误，恳请指正。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;回调方法介绍&quot;&gt;&lt;a href=&quot;#回调方法介绍&quot; class=&quot;headerlink&quot; title=&quot;回调方法介绍&quot;&gt;&lt;/a&gt;回调方法介绍&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;说起Activity的生命周期想必离不开一幅图&lt;/strong&gt;&lt;br&gt;&lt;img src=&quot;
      
    
    </summary>
    
    
      <category term="Android学习" scheme="http://yoursite.com/tags/Android%E5%AD%A6%E4%B9%A0/"/>
    
  </entry>
  
  <entry>
    <title>大一暑假</title>
    <link href="http://yoursite.com/2019/07/28/%E5%A4%A7%E4%B8%80%E6%9A%91%E5%81%87/"/>
    <id>http://yoursite.com/2019/07/28/大一暑假/</id>
    <published>2019-07-28T07:06:18.000Z</published>
    <updated>2019-08-29T13:01:31.358Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>难以想象，暑假一半已经过去了。毫不谦虚地说，从放假的第一天就玩到现在。非要用一个词来形容的话，应该是心满意足吧hh…然后接下来要打卡好好学习了。</p></blockquote><table><thead><tr><th style="text-align:center">时间</th><th style="text-align:center">理论</th><th style="text-align:center">编程</th><th style="text-align:center">生活</th></tr></thead><tbody><tr><td style="text-align:center">7.28</td><td style="text-align:center">四大组件生命周期</td><td style="text-align:center">构思app</td><td style="text-align:center">辅导妹妹学习</td></tr><tr><td style="text-align:center">7.29</td><td style="text-align:center">四大组件生命周期</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">7.30</td><td style="text-align:center">没禁得住诱惑</td><td style="text-align:center">又跟朋友</td><td style="text-align:center">出去耍了一天</td></tr><tr><td style="text-align:center">7.31</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">吃狗肉</td></tr><tr><td style="text-align:center">8.1</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">台风ing</td></tr><tr><td style="text-align:center">8.2</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">梁祝指法</td></tr><tr><td style="text-align:center">8.3</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">同学聚会</td></tr><tr><td style="text-align:center">8.5</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">梁祝第一段</td></tr><tr><td style="text-align:center">8.6</td><td style="text-align:center">服务生命周期</td><td style="text-align:center"></td><td style="text-align:center">辅导妹妹</td></tr><tr><td style="text-align:center">8.8</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">梁祝第二段</td></tr><tr><td style="text-align:center">8.9</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">梁祝左手</td></tr><tr><td style="text-align:center">8.10</td><td style="text-align:center">碎片生命周期</td><td style="text-align:center"></td><td style="text-align:center">辅导妹妹</td></tr><tr><td style="text-align:center">8.11</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">梁祝双手弹奏</td></tr><tr><td style="text-align:center">8.12</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">东莞之行</td></tr><tr><td style="text-align:center">8.13</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">寄宿生活开始</td></tr><tr><td style="text-align:center">8.13</td><td style="text-align:center"></td><td style="text-align:center">抢红包插件</td><td style="text-align:center">认识新的朋友</td></tr><tr><td style="text-align:center">8.14</td><td style="text-align:center"></td><td style="text-align:center">抢红包插件bug修复</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">8.16</td><td style="text-align:center">自定义view</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">8.18</td><td style="text-align:center">自定义view</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">8.19</td><td style="text-align:center">自定义view</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">8.20</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">电影沉默的证人</td></tr><tr><td style="text-align:center">8.21</td><td style="text-align:center">自定义view</td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">8.22</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">清远之行</td></tr><tr><td style="text-align:center">8.23</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">清远之行</td></tr><tr><td style="text-align:center">8.24</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">辅导婷妹妹学习</td></tr><tr><td style="text-align:center">8.25</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">辅导婷妹妹学习</td></tr><tr><td style="text-align:center">8.26</td><td style="text-align:center"></td><td style="text-align:center">抢红包完善</td><td style="text-align:center"></td></tr><tr><td style="text-align:center">8.27</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">累累累</td></tr><tr><td style="text-align:center">8.28</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">又去清远</td></tr><tr><td style="text-align:center">8.29</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center">离别的夜晚</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;难以想象，暑假一半已经过去了。毫不谦虚地说，从放假的第一天就玩到现在。非要用一个词来形容的话，应该是心满意足吧hh…然后接下来要打卡好好学习了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;t
      
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Java简单实现爬虫</title>
    <link href="http://yoursite.com/2019/06/26/Java%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B0%E7%88%AC%E8%99%AB/"/>
    <id>http://yoursite.com/2019/06/26/Java简单实现爬虫/</id>
    <published>2019-06-26T12:04:20.000Z</published>
    <updated>2019-06-26T12:08:09.153Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好久没写博客了，这个月好多东西要操心。刚考完两门期末考试，距离下次考试还有几天，利用这个空档期写一写（好久没碰代码，hhh…）。</p></blockquote><p>怎么用Java比较简单地去网上爬一些东西呢，比如一些图片。作为Java小白（在此之前，都不知道爬虫是个什么，hhh..）最近遇到这个问题，去网上找了一些思路。大致是这样的：</p><ul><li>先访问某网络得到它的网站原代码</li><li>用正则表达式匹配出你想要的内容。</li></ul><h5 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h5><p>现在在<a href="https://pixabay.com/zh/images/search/%E5%BF%AB%E4%B9%90/" target="_blank" rel="noopener">https://pixabay.com/zh/images/search/%E5%BF%AB%E4%B9%90/</a>这个网站爬一张图片试试看。</p><ul><li>Java常规操作访问这个网站可以返回这个网站的原代码。<figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"utf-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="undefined">(function(w,d,s,l,i)&#123;w[l]=w[l]||[];w[l].push(&#123;'gtm.start':new </span></span><br><span class="line"><span class="undefined">    Date().getTime(),event:'gtm.js'&#125;);var f=d.getElementsByTagName(s)</span></span><br><span class="line"><span class="undefined">    [0],j=d.createElement(s),dl=l!='dataLayer'?'&amp;l='+l:'';j.async=true;j.src='https://www.googletagmanager.com/gtm.js?id='</span></span><br><span class="line"><span class="undefined">    +i+dl;f.parentNode.insertBefore(j,f);&#125;)(window,document,'script','dataLayer','GTM-5CF9ZN');</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">    ...</span><br></pre></td></tr></table></figure></li></ul><p>我们打印出返回的结果，发现就是一大段html代码。没学过，看不懂，但是不用想我找到我想要爬取的图片连接，经过观察发现，他的图片连接都在这一块：<br><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">div class="item" data-w="640" data-h="426"&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">srcset</span>=<span class="string">"https://cdn.pixabay.com/photo/2019/03/05/12/26/toque-macaque-4036088__340.jpg 1x, https://cdn.pixabay.com/photo/2019/03/05/12/26/toque-macaque-4036088__480.jpg 2x"</span> <span class="attr">src</span>=<span class="string">"https://cdn.pixabay.com/photo/2019/03/05/12/26/toque-macaque-4036088__340.jpg"</span> <span class="attr">alt</span>=<span class="string">""</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>发现只要是<strong>srcset=””</strong>引号里面的都是那个网站上面的图片连接。</p><ul><li><p>用正则表达式将我们需要的连接从返回的一大块代码中匹配出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Pattern pattern1 = Pattern.compile(<span class="string">"(?&lt;=srcset=\").*?(?=\")"</span>); </span><br><span class="line">Matcher matcher1 = pattern1.matcher(ResponseData);</span><br><span class="line"><span class="comment">//ResponseData是返回的结果，是一段字符串</span></span><br><span class="line">ArrayList&lt;String&gt; list1 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"><span class="keyword">while</span> (matcher1.find())&#123;</span><br><span class="line">    String group1 = matcher1.group();</span><br><span class="line">    list1.add(group1);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>最后可以把list里面的内容打印出来检验一下，这是爬出来的结果其中一条连接：<a href="https://cdn.pixabay.com/photo/2015/01/07/15/51/woman-591576__340.jpg" target="_blank" rel="noopener">https://cdn.pixabay.com/photo/2015/01/07/15/51/woman-591576__340.jpg</a><br>当然这是一张缩略图（因为网站上面的是缩略图），想要找它的详图也简单</p></li><li>匹配图片详情页链接（也在那一大段代码里面），逐一访问。</li><li>访问返回的数据，再匹配出详情页的图片就OK了。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;好久没写博客了，这个月好多东西要操心。刚考完两门期末考试，距离下次考试还有几天，利用这个空档期写一写（好久没碰代码，hhh…）。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;怎么用Java比较简单地去网上爬一些东西呢，比如一些图片。作为Java小白（
      
    
    </summary>
    
    
      <category term="java入门" scheme="http://yoursite.com/tags/java%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android-回顾概览</title>
    <link href="http://yoursite.com/2019/04/09/Android%E7%9A%84%E5%9B%9B%E5%B1%82%E6%9E%B6%E6%9E%84/"/>
    <id>http://yoursite.com/2019/04/09/Android的四层架构/</id>
    <published>2019-04-09T14:04:46.000Z</published>
    <updated>2019-04-12T11:38:06.418Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>前面追求快速入门，第一行代码基本事一遍过，最近花一两天回顾一下，Android入门知识整合一下。</p></blockquote><h2 id="Android的四层架构"><a href="#Android的四层架构" class="headerlink" title="Android的四层架构"></a>Android的四层架构</h2><ul><li><p>Linux内核层<br>Android系统是基于Linux内核的，这一层为Android设备的各种硬件提供了<strong>底层的驱动</strong>，如<br>显示驱动、音频驱动、照相机驱动、蓝牙驱动、Wi-Fi驱动、电源管理等。</p></li><li><p>系统运行库层<br>这一层主要通过<strong>C/C++库</strong>来给Android提供一些<strong>特性支持</strong>，如SQLite库提供数据库的支持，OpenGL|ES库提供3D绘图，WebKit提供浏览器内核。这一层还有Android运行时库，其中包含ART运行环境<br>ART能够把应用程序的字节码转换为机器码，是Android所使用的一种新的<strong>虚拟机</strong>，改善了性能、垃圾回收(Garbage Collection)、应用程序除错以及性能分析。ART引入了AOT这种预编译技术，在应用程序<strong>安装</strong>的过程中，ART就已经将所有的<strong>字节码</strong>重新编译成了<strong>机器码</strong>。应用程序运行过程中无需进行实时的编译工作，只需要进行<strong>直接调用</strong>。因此，ART极大的提高了应用程序的运行效率，同时也减少了手机的<strong>电量消耗</strong>。 </p></li><li><p>应用框架层<br>这一层主要提供了构建应用时会用到的一些各种API</p></li><li><p>应用层，Android安装的所有程序，无论是自带的还是下载的或是自己开发的应用程序都属于这一层。</p></li></ul><h2 id="四大组件"><a href="#四大组件" class="headerlink" title="四大组件"></a>四大组件</h2><p>Android系统四大组件分别是活动(Aotivity)、服务(Servioe )、广播接收器(Broadcast Receiver )和内容提供器(Content Provider )。</p><ul><li><strong>活动</strong>是所有Android应用程序的<strong>门面</strong>，凡是在应用中你看得到的东西，都是放在活动中的。</li><li><strong>服务</strong>就比较低调了，你无法看到它，但它会一直在<strong>后台</strong>默默地运行，即使用户退出了应用，服务仍然是可以继续运行的。</li><li><strong>广播</strong>接收器允许你的应用接收来自各处的广播消息，比如<strong>电话、短信</strong>等，当然你的应用同样也可以向外发出广播消息。</li><li><strong>内容</strong>提供器则为应用程序之间<strong>共享数据</strong>提供了可能，比如你想要读取系统电话簿中的联系人，就需要通过内容提供器来实现。</li></ul><h2 id="Intent"><a href="#Intent" class="headerlink" title="Intent"></a>Intent</h2><p>这个东西相当于一个<strong>桥梁</strong>的作用，在四大组件之间，或者同一组件的不同实例之间穿梭。例如启动某个活动(显式启动/隐式启动)。向下一个活动传递信息。<br>返回信息给上一活动：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent=newIntent(FirstActivity.<span class="keyword">this</span>，SecondActivity.ctass);</span><br><span class="line">startActivityForResult(intent, <span class="number">1</span>);</span><br></pre></td></tr></table></figure></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Intent intent=<span class="keyword">new</span> Intent();</span><br><span class="line">intent .putExtra(<span class="string">"data"</span>,<span class="string">"Hello FirstActivity"</span>);</span><br><span class="line">setResult(RESULT_OK,intent);</span><br><span class="line">finish();</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span></span><br><span class="line">      <span class="keyword">switch</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">onACtivityResult</span><span class="params">(<span class="keyword">int</span> requestCode, <span class="keyword">int</span> resultCode, Intent data)</span></span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (requestCode)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">  <span class="keyword">if</span>(resultCode==RESULT_OK)&#123;</span><br><span class="line">  String returnedData=data .getStringExtra(<span class="string">"data"</span>);</span><br><span class="line">  Log .d(<span class="string">"FirstActivity"</span>,returnedData);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">  </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ul><li>UI  这个就是门面，把界面搞得好看，狂炫酷帅吊炸天。</li><li>碎片 这个就是小型Activity，可以多次调用，不用每次去启动Activity这个庞然大物</li><li>数据储存  这就是后台，数据的处理。</li><li>网络  顾名思义，和服务器交互，把app数据搞成“动态”</li><li>还有各种API，定位，语音听写等等。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;前面追求快速入门，第一行代码基本事一遍过，最近花一两天回顾一下，Android入门知识整合一下。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Android的四层架构&quot;&gt;&lt;a href=&quot;#Android的四层架构&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>总结-2019.4月</title>
    <link href="http://yoursite.com/2019/04/08/%E6%80%BB%E7%BB%93-2019-4%E6%9C%88/"/>
    <id>http://yoursite.com/2019/04/08/总结-2019-4月/</id>
    <published>2019-04-08T12:03:29.000Z</published>
    <updated>2019-04-09T13:26:43.020Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于开学到现在的一些总结"><a href="#关于开学到现在的一些总结" class="headerlink" title="关于开学到现在的一些总结"></a>关于开学到现在的一些总结</h3><h4 id="这段时间干了啥？"><a href="#这段时间干了啥？" class="headerlink" title="这段时间干了啥？"></a>这段时间干了啥？</h4><ul><li>第一行代码，Java入门算是看完了</li><li>这段时间搞了一些SDK来玩，百度定位，讯飞听写，bmob云数据库。</li><li>也用了Github上边一些库来玩。</li><li>参加了蓝桥杯，然而安慰奖都没有</li><li>嗯，Android算是入门了吧，我也不知道。</li></ul><h4 id="本来想干啥？"><a href="#本来想干啥？" class="headerlink" title="本来想干啥？"></a>本来想干啥？</h4><ul><li>本来想写一个智能一点的便签，但是后边发现现在各大手机系统自带的语音助手已经实现了大部分功能,纯当练手了。</li><li>后来想写一个类似于星图的东西，现在看来多半要搁浅了，一是数据难找，二是绘图能以实现。</li></ul><h4 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h4><ul><li>感觉学的东西太少了，或者说不扎实。要学的东西还有很多，与此同时，学习方面高数，离散，英语也不能丢。专业上还有算法，网络这部分的学习也是迫在眉睫。</li></ul><h4 id="四月份计划"><a href="#四月份计划" class="headerlink" title="四月份计划"></a>四月份计划</h4><ul><li>Android方面的话，花2到3天，把Java入门及第一行代码看一遍，以前看不懂的，现在应该能看懂了。完了以后去学一些更加深入的学习，去看一些优秀项目源码，造造轮子等等。</li><li>算法和数据方面，还是要一步一步把它练熟。</li><li>网络方面应该要稍稍推迟一些，一边写项目一边学</li><li>英语四级的话，目前还是坚持记单词，不至于6月份这么慌</li><li>高数这些还是在周一到周五白天keep住就行。</li><li>项目，继续找想法。当然没有什么想法的时候，可以找一些来练手。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于开学到现在的一些总结&quot;&gt;&lt;a href=&quot;#关于开学到现在的一些总结&quot; class=&quot;headerlink&quot; title=&quot;关于开学到现在的一些总结&quot;&gt;&lt;/a&gt;关于开学到现在的一些总结&lt;/h3&gt;&lt;h4 id=&quot;这段时间干了啥？&quot;&gt;&lt;a href=&quot;#这段时间干
      
    
    </summary>
    
    
      <category term="生活" scheme="http://yoursite.com/tags/%E7%94%9F%E6%B4%BB/"/>
    
  </entry>
  
  <entry>
    <title>Android-探究服务</title>
    <link href="http://yoursite.com/2019/03/14/Android-%E6%8E%A2%E7%A9%B6%E6%9C%8D%E5%8A%A1/"/>
    <id>http://yoursite.com/2019/03/14/Android-探究服务/</id>
    <published>2019-03-14T14:35:11.000Z</published>
    <updated>2019-07-29T09:45:40.256Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务基本使用"><a href="#服务基本使用" class="headerlink" title="服务基本使用"></a>服务基本使用</h3><h5 id="创建服务"><a href="#创建服务" class="headerlink" title="创建服务"></a>创建服务</h5><p>右键new一个Service就行了。</p><h5 id="服务的生命周期"><a href="#服务的生命周期" class="headerlink" title="服务的生命周期"></a>服务的生命周期</h5><ul><li><p>启动一个服务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DownloadService.class);</span><br><span class="line">startService(intent);</span><br></pre></td></tr></table></figure></li><li><p>结束一个服务<br>stopService(intent);</p></li><li>在服务中突然停止一个服务<br>stopSelf();<h6 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h6></li><li>onCreat()<br>服务第一次被创建是执行</li><li>onStartCommand()<br>服务每次被启动就会执行</li><li>onDestroy()<br>服务被销毁时执行<h5 id="服务与活动进行通信"><a href="#服务与活动进行通信" class="headerlink" title="服务与活动进行通信"></a>服务与活动进行通信</h5>这个是有基本套路的，首先在服务中添加代码<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//服务与活动通信</span></span><br><span class="line">    <span class="keyword">private</span> DownloadBinder mBinder = <span class="keyword">new</span> DownloadBinder();</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> IBinder <span class="title">onBind</span><span class="params">(Intent intent)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mBinder;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DownloadBinder</span> <span class="keyword">extends</span> <span class="title">Binder</span> </span>&#123;</span><br><span class="line">    <span class="comment">//这里写外部调用的方法</span></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><p>然后在活动中添加如下代码实例化Binder<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> DownloadService.DownloadBinder downloadBinder;</span><br><span class="line"><span class="comment">//获取DownloadBinder实例</span></span><br><span class="line">   <span class="keyword">private</span> ServiceConnection connection = <span class="keyword">new</span> ServiceConnection() &#123;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceConnected</span><span class="params">(ComponentName name, IBinder service)</span> </span>&#123;</span><br><span class="line">           downloadBinder = (DownloadService.DownloadBinder) service;</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="meta">@Override</span></span><br><span class="line">       <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onServiceDisconnected</span><span class="params">(ComponentName name)</span> </span>&#123;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure></p><p>紧接着在活动中添加代码，把服务和活动绑定在一起<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>, DownloadService.class);</span><br><span class="line">startService(intent);<span class="comment">//启动服务</span></span><br><span class="line">bindService(intent, connection, BIND_AUTO_CREATE);<span class="comment">//绑定服务</span></span><br></pre></td></tr></table></figure></p><p>顺手我们在活动的onDestroy()把活动解除绑定（因为怕你在用完服务之后忘了）<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onDestroy();</span><br><span class="line">unbindService(connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>既然已经绑定了服务，有实例化了Binder，那就可以进行通信了，直接用Binder调用方法就行了。例如<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">downloadBinder.startDownload(url);</span><br></pre></td></tr></table></figure></p><h5 id="前台服务"><a href="#前台服务" class="headerlink" title="前台服务"></a>前台服务</h5><p>前台服务和同时一样的，就启动的时候用startForground就行了<br>上代码：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> NotificationManager <span class="title">getNotificationManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (NotificationManager)getSystemService(NOTIFICATION_SERVICE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//建立下载进度条的通知</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> Notification <span class="title">getNotification</span><span class="params">(String title, <span class="keyword">int</span> progress)</span></span>&#123;</span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="keyword">this</span>,MainActivity.class);</span><br><span class="line">PendingIntent pi = PendingIntent.getActivity(<span class="keyword">this</span>,</span><br><span class="line"><span class="number">0</span>, intent, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置NotificationChannel</span></span><br><span class="line">NotificationChannel channel = <span class="keyword">new</span> NotificationChannel</span><br><span class="line">(<span class="string">"download_for"</span>, <span class="string">"前台服务"</span>, getNotificationManager().IMPORTANCE_LOW);</span><br><span class="line">channel.enableVibration(<span class="keyword">false</span>);</span><br><span class="line">getNotificationManager().createNotificationChannel(channel);</span><br><span class="line"></span><br><span class="line"><span class="comment">//通知内容</span></span><br><span class="line">NotificationCompat.Builder builder =</span><br><span class="line"><span class="keyword">new</span> NotificationCompat.Builder(<span class="keyword">this</span>, <span class="string">"download_for"</span>);</span><br><span class="line">builder.setSmallIcon(R.mipmap.ic_launcher);</span><br><span class="line">builder.setLargeIcon(BitmapFactory.decodeResource(getResources(),</span><br><span class="line">R.mipmap.ic_launcher));</span><br><span class="line">builder.setContentIntent(pi);</span><br><span class="line">builder.setContentTitle(title);</span><br><span class="line"><span class="keyword">if</span>(progress &gt; <span class="number">0</span>)&#123;</span><br><span class="line">builder.setContentText(progress + <span class="string">"%"</span>);</span><br><span class="line">builder.setProgress(<span class="number">100</span>, progress, <span class="keyword">false</span>);</span><br><span class="line">&#125;</span><br><span class="line">Log.d(<span class="string">"测试"</span>, <span class="string">"前台服务设置内容完毕"</span>);</span><br><span class="line"><span class="keyword">return</span> builder.build();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="另外附上NotificationChannel的一些设置"><a href="#另外附上NotificationChannel的一些设置" class="headerlink" title="另外附上NotificationChannel的一些设置"></a>另外附上NotificationChannel的一些设置</h5><h6 id="importance-level的七种层次："><a href="#importance-level的七种层次：" class="headerlink" title="importance level的七种层次："></a>importance level的七种层次：</h6><ul><li>IMPORTANCE_DEFAULT: 默认notification importance,可以在任何地方显示，有声音。</li><li>IMPORTANCE_HIGH:可以在任何地方显示，有声音.</li><li>IMPORTANCE_LOW:可以在任何地方显示,没有声音.</li><li>IMPORTANCE_MAX:重要程度最高，可以在任何地方显示，有声音，可以在用户当前屏幕上显示通知,可以使用full screen intents.比如来电。</li><li>IMPORTANCE_MIN:无声音，不会出现在状态栏中。</li><li>IMPORTANCE_NONE:在任何地方都不会显示，被阻塞。</li><li>IMPORTANCE_UNSPECIFIED:表示用户没有表示重要性的值。这个值是为了持久的首选项，并且永远不应该与实际的通知相关联。</li></ul><h6 id="NotificationChannel的方法列表："><a href="#NotificationChannel的方法列表：" class="headerlink" title="NotificationChannel的方法列表："></a>NotificationChannel的方法列表：</h6><p>getId() —  获取 ChannleId<br>enableLights() —  开启指示灯，如果设备有的话。<br>setLightColor() —  设置指示灯颜色<br>enableVibration() —  开启震动<br>setVibrationPattern() —  设置震动频率<br>setImportance() —  设置频道重要性<br>getImportance() —  获取频道重要性<br>setSound() —  设置声音<br>getSound() —  获取声音<br>setGroup() —  设置 ChannleGroup<br>getGroup() —  得到 ChannleGroup<br>setBypassDnd() —  设置绕过免打扰模式<br>canBypassDnd() —  检测是否绕过免打扰模式<br>getName() —  获取名称<br>setLockScreenVisibility() —  设置是否应在锁定屏幕上显示此频道的通知<br>getLockscreenVisibility() —  检测是否应在锁定屏幕上显示此频道的通知<br>setShowBadge() 设置是否显示角标<br>canShowBadge() —  检测是否显示角标</p><h5 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h5><p><a href="https://gavinliu.cn/2017/08/22/Android-%E5%90%83%E5%A5%A5%E5%88%A9%E5%A5%A5%E7%B3%BB%E5%88%97-1-Notification/" target="_blank" rel="noopener">https://gavinliu.cn/2017/08/22/Android-%E5%90%83%E5%A5%A5%E5%88%A9%E5%A5%A5%E7%B3%BB%E5%88%97-1-Notification/</a><br><a href="https://blog.csdn.net/Haienzi/article/details/81268022" target="_blank" rel="noopener">https://blog.csdn.net/Haienzi/article/details/81268022</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务基本使用&quot;&gt;&lt;a href=&quot;#服务基本使用&quot; class=&quot;headerlink&quot; title=&quot;服务基本使用&quot;&gt;&lt;/a&gt;服务基本使用&lt;/h3&gt;&lt;h5 id=&quot;创建服务&quot;&gt;&lt;a href=&quot;#创建服务&quot; class=&quot;headerlink&quot; title=&quot;创
      
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android-多线程编程</title>
    <link href="http://yoursite.com/2019/03/14/Android-%E5%A4%9A%E7%BA%BF%E7%A8%8B%E7%BC%96%E7%A8%8B/"/>
    <id>http://yoursite.com/2019/03/14/Android-多线程编程/</id>
    <published>2019-03-14T14:07:00.000Z</published>
    <updated>2019-03-15T08:59:57.695Z</updated>
    
    <content type="html"><![CDATA[<h3 id="线程的基本用法"><a href="#线程的基本用法" class="headerlink" title="线程的基本用法"></a>线程的基本用法</h3><p>基本用法和Java一样的。<br>第一种，继承于Thread<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">extends</span> <span class="title">Thread</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里写逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>启动方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> MyThread.start();</span><br></pre></td></tr></table></figure></p><p>第二种，实现Runnab接口<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyThread</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//这里写逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动方法<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">MyThread myThread = <span class="keyword">new</span> MyThread();</span><br><span class="line"><span class="keyword">new</span> Thread(myThread).start();</span><br></pre></td></tr></table></figure></p><h3 id="AsyncTask的使用"><a href="#AsyncTask的使用" class="headerlink" title="AsyncTask的使用"></a>AsyncTask的使用</h3><p>多线程的使用过程中，有一点是非常重要的: <strong>子线程不允许进行UI操作</strong>，那怎么办咧? Android 提供了一套异步消息处理机制，根据这个机制，Android也封装了一个工具类<strong>AsyncTask</strong>给我们更好的进行UI操作</p><ul><li>我们一般使用一个类去继承它，写法如下：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DownloadTask</span> <span class="keyword">extends</span> <span class="title">AsyncTask</span>&lt;<span class="title">String</span>, <span class="title">Integer</span>, <span class="title">Integer</span>&gt;</span></span><br></pre></td></tr></table></figure></li></ul><p>可以看到AsyncTask传入三个参数</p><ul><li>Params 执行AsyncTask传入的参数，可用于后台任务</li><li>Progress 记录当前任务执行进度的参数，可以指定泛型</li><li>Result 任务执行完毕的返回值 可指定泛型<h4 id="AsyncTask-经常重写的4个方法"><a href="#AsyncTask-经常重写的4个方法" class="headerlink" title="AsyncTask 经常重写的4个方法"></a>AsyncTask 经常重写的4个方法</h4><h5 id="onPreExecute"><a href="#onPreExecute" class="headerlink" title="onPreExecute()"></a>onPreExecute()</h5>这个方法会在任务执行之前执行，可以在这里写一下初始化的东西<h5 id="doInBackground-String…strings"><a href="#doInBackground-String…strings" class="headerlink" title="doInBackground(String…strings)"></a>doInBackground(String…strings)</h5><ul><li>这个方法的所有内容全部都会在<strong>子线程</strong>执行</li><li>传入的参数为上面的<strong>Params</strong></li><li>需要返回一个<strong>Result</strong></li><li>若想反馈当前任务进度可以调用方法:<strong>publishProgress(progress);</strong></li></ul></li></ul><h5 id="onProgressUpdate-Integer…-values"><a href="#onProgressUpdate-Integer…-values" class="headerlink" title="onProgressUpdate(Integer… values)"></a>onProgressUpdate(Integer… values)</h5><p>在 doInBackground 调用 publishProgress(progress)后这个方法会马上执行，可以在这里执行一些UI更新或者其他的操作。</p><h5 id="onPostExecute-Integer-status"><a href="#onPostExecute-Integer-status" class="headerlink" title="onPostExecute(Integer status)"></a>onPostExecute(Integer status)</h5><ul><li>这个方法在doInBackground执行return后会启动</li><li>传入参数为Result</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;线程的基本用法&quot;&gt;&lt;a href=&quot;#线程的基本用法&quot; class=&quot;headerlink&quot; title=&quot;线程的基本用法&quot;&gt;&lt;/a&gt;线程的基本用法&lt;/h3&gt;&lt;p&gt;基本用法和Java一样的。&lt;br&gt;第一种，继承于Thread&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;MyThread&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Thread&lt;/span&gt;&lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;()&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//这里写逻辑&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android-探究广播</title>
    <link href="http://yoursite.com/2019/03/11/ANdroid-%E6%8E%A2%E7%A9%B6%E5%B9%BF%E6%92%AD/"/>
    <id>http://yoursite.com/2019/03/11/ANdroid-探究广播/</id>
    <published>2019-03-11T10:44:24.000Z</published>
    <updated>2019-04-08T11:32:19.566Z</updated>
    
    <content type="html"><![CDATA[<h2 id="接收广播"><a href="#接收广播" class="headerlink" title="接收广播"></a>接收广播</h2><p>想要接受广播呢，就需要注册一个广播接收器，有两种方法进行注册。</p><h5 id="一、静态注册"><a href="#一、静态注册" class="headerlink" title="一、静态注册"></a>一、静态注册</h5><p>静态注册相对简单，右键包-&gt;new-&gt;other-&gt;Broadcast Receive。生成一个继承于BroadcastReceiver的类，系统会自动进行注册。在AndroidManifast.xml的广播的便签里边指定接收的广播Action</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.a73233.broadcasttest.My"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br></pre></td></tr></table></figure><h5 id="二、动态注册"><a href="#二、动态注册" class="headerlink" title="二、动态注册"></a>二、动态注册</h5><p>先写一个继承于BroadcastReceiver的内部类<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">My2</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">        Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                <span class="string">"广播2"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">        Log.d(<span class="string">"测试"</span>, <span class="string">"广播2"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后加入代码进行注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line"><span class="keyword">private</span> My2 my2;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line"><span class="comment">//添加广播Action</span></span><br><span class="line">intentFilter.addAction(<span class="string">"com.example.a73233.broadcasttest.My"</span>);</span><br><span class="line">my2 = <span class="keyword">new</span> My2();</span><br><span class="line">registerReceiver(my2, intentFilter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>动态注册的话是需要再活动销毁时进行取消注册的。直接在onDestroy()加入代码就行<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onDestroy();</span><br><span class="line">    <span class="comment">//取消注册</span></span><br><span class="line">unregisterReceiver(my2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h2 id="发送标准广播"><a href="#发送标准广播" class="headerlink" title="发送标准广播"></a>发送标准广播</h2><p>标准广播是异步发送的，不可被截断的。添加如下语句即可<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//括号内指定广播Action</span></span><br><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.a73233.broadcasttest.My"</span>);</span><br><span class="line">sendBroadcast(intent);</span><br></pre></td></tr></table></figure></p><h2 id="发送有序广播"><a href="#发送有序广播" class="headerlink" title="发送有序广播"></a>发送有序广播</h2><p>有序广播可以被截断<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.a73233.broadcasttest.My"</span>);</span><br><span class="line">sendOrderedBroadcast(intent, <span class="keyword">null</span>);</span><br></pre></td></tr></table></figure></p><p>设置广播接收器优先级<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//设置广播接收器优先级为100</span></span><br><span class="line">intentFilter.setPriority(<span class="number">100</span>);</span><br></pre></td></tr></table></figure></p><h2 id="发送本地广播"><a href="#发送本地广播" class="headerlink" title="发送本地广播"></a>发送本地广播</h2><p>本地广播呢只能被本程序接收到，其他应用无法接收，具有较高的安全性<br>代码如下，和前边其实差不多，就多了一个<strong>LocalBroadcastManager</strong>这个类。<br>调用这个类的<strong>registerReceiver</strong>进行注册<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MainActivity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> IntentFilter intentFilter;</span><br><span class="line">    <span class="keyword">private</span> LocalBroadcastManager localBroadcastManager;</span><br><span class="line">    <span class="keyword">private</span> My1 my1;</span><br><span class="line">    <span class="keyword">private</span> My2 my2;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main);</span><br><span class="line"></span><br><span class="line">        localBroadcastManager = LocalBroadcastManager.getInstance(<span class="keyword">this</span>);</span><br><span class="line">        intentFilter = <span class="keyword">new</span> IntentFilter();</span><br><span class="line">        intentFilter.addAction(<span class="string">"com.example.a73233.broadcasttest.My"</span>);</span><br><span class="line">        my1 = <span class="keyword">new</span> My1();</span><br><span class="line">        my2 = <span class="keyword">new</span> My2();</span><br><span class="line">        localBroadcastManager.registerReceiver(my2, intentFilter);</span><br><span class="line">        localBroadcastManager.registerReceiver(my1, intentFilter);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        Button button = (Button)findViewById(R.id.send);</span><br><span class="line">        button.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                Intent intent = <span class="keyword">new</span> Intent(<span class="string">"com.example.a73233.broadcasttest.My"</span>);</span><br><span class="line">                localBroadcastManager.sendBroadcast(intent);</span><br><span class="line">                Log.d(<span class="string">"广播测试"</span>, <span class="string">"发送完毕"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onDestroy</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onDestroy();</span><br><span class="line">        localBroadcastManager.unregisterReceiver(my2);</span><br><span class="line">        localBroadcastManager.unregisterReceiver(my1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">My1</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                    <span class="string">"广播11111111"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            Log.d(<span class="string">"测试"</span>, <span class="string">"广播1"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">My2</span> <span class="keyword">extends</span> <span class="title">BroadcastReceiver</span></span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onReceive</span><span class="params">(Context context, Intent intent)</span> </span>&#123;</span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>,</span><br><span class="line">                    <span class="string">"广播2222222222222"</span>, Toast.LENGTH_SHORT).show();</span><br><span class="line">            Log.d(<span class="string">"测试"</span>, <span class="string">"广播2"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;接收广播&quot;&gt;&lt;a href=&quot;#接收广播&quot; class=&quot;headerlink&quot; title=&quot;接收广播&quot;&gt;&lt;/a&gt;接收广播&lt;/h2&gt;&lt;p&gt;想要接受广播呢，就需要注册一个广播接收器，有两种方法进行注册。&lt;/p&gt;
&lt;h5 id=&quot;一、静态注册&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>探究碎片</title>
    <link href="http://yoursite.com/2019/03/01/%E6%8E%A2%E7%A9%B6%E7%A2%8E%E7%89%87/"/>
    <id>http://yoursite.com/2019/03/01/探究碎片/</id>
    <published>2019-03-01T14:16:07.000Z</published>
    <updated>2019-03-02T06:28:28.024Z</updated>
    
    <content type="html"><![CDATA[<h4 id="碎片的使用"><a href="#碎片的使用" class="headerlink" title="碎片的使用"></a>碎片的使用</h4><p>使用之前你可以直观地将<strong>碎片</strong>理解为一个<strong>小Activity</strong>。既如此，碎片就和活动一样有一个Java文件和一个布局文件。这里用两个碎片举例说明</p><ul><li>先写一两个布局文件left.xml和right.xml</li></ul><p>左布局：</p><a id="more"></a><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">?xml version="1.0" encoding="utf-8"?&gt;</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/left_bottom"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"左边按钮"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><p>右布局：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.constraint.ConstraintLayout</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">android:background</span>=<span class="string">"@color/colorAccent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/ringht"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"右边"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">android.support.constraint.ConstraintLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>创建两个新的类，都继承与Fragment</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">left_Fragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, @Nullable ViewGroup container,</span></span></span><br><span class="line"><span class="function"><span class="params">                             @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.left, container,<span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">right_Fragment</span> <span class="keyword">extends</span> <span class="title">Fragment</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Nullable</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">onCreateView</span><span class="params">(@NonNull LayoutInflater inflater, </span></span></span><br><span class="line"><span class="function"><span class="params">    @Nullable ViewGroup container, @Nullable Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        View view = inflater.inflate(R.layout.right, container, <span class="keyword">false</span>);</span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样两个碎片写好了，接下在把它添加到活动中</p><h5 id="静态添加"><a href="#静态添加" class="headerlink" title="静态添加"></a>静态添加</h5><p>直接在活动布局中跟添加普通控件一样就行，就是多了一个name属性指定添加碎片类名。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/left_layout"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"com.example.a73233.fragment_test.left_Fragment"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/right_layout"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"com.example.a73233.fragment_test.right_Fragment"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><h5 id="动态添加"><a href="#动态添加" class="headerlink" title="动态添加"></a>动态添加</h5><p>先修改布局文件，把右碎片换成FrameLayout，到时候动态添加的碎片就是在FrameLayout里面的。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">LinearLayout</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:orientation</span>=<span class="string">"horizontal"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">fragment</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/left_layout"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:name</span>=<span class="string">"com.example.a73233.fragment_test.My_Fragment"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">FrameLayout</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:id</span>=<span class="string">"@+id/right_layout"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_width</span>=<span class="string">"0dp"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_weight</span>=<span class="string">"1"</span></span></span><br><span class="line"><span class="tag">            <span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">LinearLayout</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>在活动中添加逻辑代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取FragmentManager</span></span><br><span class="line">FragmentManager fragmentManager = getSupportFragmentManager();</span><br><span class="line"><span class="comment">//启动一个事务</span></span><br><span class="line">FragmentTransaction transaction = fragmentManager.beginTransaction();</span><br><span class="line"><span class="comment">//向容器里面添加（add）或替换(replace)碎片</span></span><br><span class="line">transaction.replace(R.id.right_layout, fragment);</span><br><span class="line"><span class="comment">//设置碎片返回栈。</span></span><br><span class="line">transaction.addToBackStack(<span class="keyword">null</span>);</span><br><span class="line"><span class="comment">//提交事务</span></span><br><span class="line">transaction.commit();</span><br></pre></td></tr></table></figure></p><h4 id="碎片里边添加逻辑"><a href="#碎片里边添加逻辑" class="headerlink" title="碎片里边添加逻辑"></a>碎片里边添加逻辑</h4><p>一般在onCreateView实例控件，在onActivityCreated给控件添加逻辑。<br>碎片生命历程及其响应方法可以参看这篇博客<br><a href="https://juejin.im/post/5a1c068b6fb9a045030fcf8c" target="_blank" rel="noopener">https://juejin.im/post/5a1c068b6fb9a045030fcf8c</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;碎片的使用&quot;&gt;&lt;a href=&quot;#碎片的使用&quot; class=&quot;headerlink&quot; title=&quot;碎片的使用&quot;&gt;&lt;/a&gt;碎片的使用&lt;/h4&gt;&lt;p&gt;使用之前你可以直观地将&lt;strong&gt;碎片&lt;/strong&gt;理解为一个&lt;strong&gt;小Activity&lt;/strong&gt;。既如此，碎片就和活动一样有一个Java文件和一个布局文件。这里用两个碎片举例说明&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;先写一两个布局文件left.xml和right.xml&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;左布局：&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>第一行代码没有的RecycleView知识</title>
    <link href="http://yoursite.com/2019/02/25/%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E6%B2%A1%E6%9C%89%E7%9A%84RecycleView%E7%9F%A5%E8%AF%86/"/>
    <id>http://yoursite.com/2019/02/25/第一行代码没有的RecycleView知识/</id>
    <published>2019-02-25T12:15:43.000Z</published>
    <updated>2019-10-03T08:52:11.915Z</updated>
    
    <content type="html"><![CDATA[<h3 id="设置item的间距"><a href="#设置item的间距" class="headerlink" title="设置item的间距"></a>设置item的间距</h3><ul><li>先新建一个java文件<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SpacesItemDecoration</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ItemDecoration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> space;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SpacesItemDecoration</span><span class="params">(<span class="keyword">int</span> space)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.space = space;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">getItemOffsets</span><span class="params">(Rect outRect, View view,</span></span></span><br><span class="line"><span class="function"><span class="params">                               RecyclerView parent, RecyclerView.State state)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//设置item之间的间距（上下左右）</span></span><br><span class="line">        outRect.left = space;</span><br><span class="line">        outRect.right = space;</span><br><span class="line">        outRect.bottom = space;</span><br><span class="line">        <span class="comment">//设置item与parent的间距</span></span><br><span class="line">        <span class="keyword">if</span> (parent.getChildLayoutPosition(view) == <span class="number">0</span>)</span><br><span class="line">            outRect.top = space;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>在Activity添加代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> space = <span class="number">50</span>; <span class="comment">//间距</span></span><br><span class="line">recyclerView.addItemDecoration(<span class="keyword">new</span> SpacesItemDecoration(space));</span><br></pre></td></tr></table></figure></p><h3 id="item的添加与删除"><a href="#item的添加与删除" class="headerlink" title="item的添加与删除"></a>item的添加与删除</h3><h5 id="添加"><a href="#添加" class="headerlink" title="添加"></a>添加</h5><p>在Adapter添加代码</p><a id="more"></a><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//  添加数据</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addData</span><span class="params">(<span class="keyword">int</span> position, note_list note_list)</span> </span>&#123;</span><br><span class="line"><span class="comment">//      在list中指定位置添加对象：note_list</span></span><br><span class="line">        mList.add(position,note_list);</span><br><span class="line">        <span class="comment">//添加动画</span></span><br><span class="line">        notifyItemInserted(position);</span><br><span class="line">         &#125;</span><br></pre></td></tr></table></figure><p>在外面的Activity调用<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//指定位置为0，添加对象note_list</span></span><br><span class="line">adapter.addData(<span class="number">0</span>,note_list);</span><br></pre></td></tr></table></figure></p><h5 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h5><p>在Adapter添加代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除子项</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">removeData</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">        mList.remove(position);</span><br><span class="line">        <span class="comment">//删除动画</span></span><br><span class="line">        notifyItemRemoved(position);</span><br><span class="line">        <span class="comment">//整体刷新</span></span><br><span class="line">        notifyDataSetChanged();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>   在外面的Activity调用<br>   <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adapter.removeData(position);</span><br></pre></td></tr></table></figure></p><h3 id="适配器外的点击事件"><a href="#适配器外的点击事件" class="headerlink" title="适配器外的点击事件"></a>适配器外的点击事件</h3><p>   在适配器里边的点击事件，直接做一个监听就行了，在外边设置监听，就要写多几行代码（长按事件类同）</p><ul><li>现在适配器里边加入代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">  <span class="keyword">private</span> OnitemClick onitemClick;   <span class="comment">//定义点击事件接口</span></span><br><span class="line"></span><br><span class="line">   <span class="comment">//定义设置点击事件监听的方法</span></span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setOnitemClickLintener</span> <span class="params">(OnitemClick onitemClick)</span> </span>&#123;</span><br><span class="line">       <span class="keyword">this</span>.onitemClick = onitemClick;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="comment">//定义一个点击事件的接口</span></span><br><span class="line">   <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">OnitemClick</span> </span>&#123;</span><br><span class="line">       <span class="function"><span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> position)</span></span>;</span><br><span class="line">   &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(<span class="keyword">final</span> ViewHolder holder, <span class="keyword">final</span> <span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line"> <span class="keyword">final</span> note_list note_list= mList.get(position);</span><br><span class="line">holder.textView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="comment">//实现点击事件接口</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                onitemClick.onItemClick(position);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></li></ul><ul><li>在外边加入代码：<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">adapter.setOnitemClickLintener(<span class="keyword">new</span> MyAdapter.OnitemClick() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onItemClick</span><span class="params">(<span class="keyword">int</span> position)</span> </span>&#123;</span><br><span class="line">       <span class="comment">//这里写逻辑</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;设置item的间距&quot;&gt;&lt;a href=&quot;#设置item的间距&quot; class=&quot;headerlink&quot; title=&quot;设置item的间距&quot;&gt;&lt;/a&gt;设置item的间距&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;先新建一个java文件&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SpacesItemDecoration&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;RecyclerView&lt;/span&gt;.&lt;span class=&quot;title&quot;&gt;ItemDecoration&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; space;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;SpacesItemDecoration&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; space)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.space = space;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;meta&quot;&gt;@Override&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;getItemOffsets&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Rect outRect, View view,&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;params&quot;&gt;                               RecyclerView parent, RecyclerView.State state)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//设置item之间的间距（上下左右）&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        outRect.left = space;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        outRect.right = space;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        outRect.bottom = space;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;comment&quot;&gt;//设置item与parent的间距&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (parent.getChildLayoutPosition(view) == &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;            outRect.top = space;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;在Activity添加代码&lt;br&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;int&lt;/span&gt; space = &lt;span class=&quot;number&quot;&gt;50&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;//间距&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;recyclerView.addItemDecoration(&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; SpacesItemDecoration(space));&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;item的添加与删除&quot;&gt;&lt;a href=&quot;#item的添加与删除&quot; class=&quot;headerlink&quot; title=&quot;item的添加与删除&quot;&gt;&lt;/a&gt;item的添加与删除&lt;/h3&gt;&lt;h5 id=&quot;添加&quot;&gt;&lt;a href=&quot;#添加&quot; class=&quot;headerlink&quot; title=&quot;添加&quot;&gt;&lt;/a&gt;添加&lt;/h5&gt;&lt;p&gt;在Adapter添加代码&lt;/p&gt;
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>TextView纵向滚动</title>
    <link href="http://yoursite.com/2019/02/25/TextView%E7%BA%B5%E5%90%91%E6%BB%9A%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/02/25/TextView纵向滚动/</id>
    <published>2019-02-25T11:27:09.000Z</published>
    <updated>2019-10-08T11:24:43.227Z</updated>
    
    <content type="html"><![CDATA[<ul><li>在手机屏幕不够用的情况下，文字过长，TextView显示不全就需要用到滚动。而Android Studio有一个属性可以实现横向滚动。<blockquote><p>android:ellipsize=”marquee”</p></blockquote></li></ul><p>但是有时候我们希望实现的是纵向滚动，其实也简单，两句代码就可以了。</p><ul><li>方法一</li></ul><p>在布局中加入这句：（这行代码是设置滚动条的）</p><blockquote><p>android:scrollbars=”vertical”</p></blockquote><p>然后在Activity中加入:</p><blockquote><p>textview.setMovementMethod(ScrollingMovementMethod.getInstance());</p></blockquote><ul><li>方法二</li></ul><p>直接在布局中用ScrollView:</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ScrollView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/text"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">ScrollView</span>&gt;</span></span><br></pre></td></tr></table></figure><p>ScrollView的属性可以看这篇博客<a href="https://blog.csdn.net/bangyiqing/article/details/44593743" target="_blank" rel="noopener">https://blog.csdn.net/bangyiqing/article/details/44593743</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;在手机屏幕不够用的情况下，文字过长，TextView显示不全就需要用到滚动。而Android Studio有一个属性可以实现横向滚动。&lt;blockquote&gt;
&lt;p&gt;android:ellipsize=”marquee”&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/
      
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android--Imageview设置本地路径图片</title>
    <link href="http://yoursite.com/2019/02/17/Android-Imageview%E8%AE%BE%E7%BD%AE%E6%9C%AC%E5%9C%B0%E8%B7%AF%E5%BE%84%E5%9B%BE%E7%89%87/"/>
    <id>http://yoursite.com/2019/02/17/Android-Imageview设置本地路径图片/</id>
    <published>2019-02-17T07:58:06.000Z</published>
    <updated>2019-02-17T07:58:38.159Z</updated>
    
    <content type="html"><![CDATA[<p>看了网上一些对于本地路径图片的读取，总结了两个小方法</p><h4 id="将路径初始化为Uri"><a href="#将路径初始化为Uri" class="headerlink" title="将路径初始化为Uri"></a>将路径初始化为Uri</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">imageview.setImageURI(Uri.fromFile(</span><br><span class="line"><span class="keyword">new</span> File(这里填路径字符串)));</span><br></pre></td></tr></table></figure><h4 id="将流转化成Bitmap对象"><a href="#将流转化成Bitmap对象" class="headerlink" title="将流转化成Bitmap对象"></a>将流转化成Bitmap对象</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Bitmap bitmap = BitmapFactory.decodeStream(getContentResolver()</span><br><span class="line">.openInputStream(imgeUri));</span><br><span class="line">imageview.setImageBitmap(bitmap);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;看了网上一些对于本地路径图片的读取，总结了两个小方法&lt;/p&gt;
&lt;h4 id=&quot;将路径初始化为Uri&quot;&gt;&lt;a href=&quot;#将路径初始化为Uri&quot; class=&quot;headerlink&quot; title=&quot;将路径初始化为Uri&quot;&gt;&lt;/a&gt;将路径初始化为Uri&lt;/h4&gt;&lt;figure
      
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android--使用LiteaPal操作SQLite</title>
    <link href="http://yoursite.com/2019/02/14/Android-%E4%BD%BF%E7%94%A8LiteaPal%E6%93%8D%E4%BD%9CSQLite/"/>
    <id>http://yoursite.com/2019/02/14/Android-使用LiteaPal操作SQLite/</id>
    <published>2019-02-14T06:06:57.000Z</published>
    <updated>2019-02-25T12:28:13.373Z</updated>
    
    <content type="html"><![CDATA[<h3 id="什么是LitePal"><a href="#什么是LitePal" class="headerlink" title="什么是LitePal?"></a>什么是LitePal?</h3><p>LitePal是Github上的开源数据库框架，使用它呢，可以使我们不需要直接用SQL语句就可以操作安卓自带的SQLite数据库，而是用<strong>面对对象</strong>的思维去操着数据库，这对于只接触过Java没接触过SQL的小白(比如笔者)简直是一大福音。这里介绍Android Studio <strong>Java语言</strong>下使用LitePal。</p><h3 id="配置LitePal"><a href="#配置LitePal" class="headerlink" title="配置LitePal"></a>配置LitePal</h3><p>第一步、在app/build.gradle的dependencies中添加依赖：</p><pre><code>implementation &apos;org.litepal.android:java:3.0.0&apos;</code></pre><p>第二步、在 app/src/main 目录下新建名为 assets 的目录，在 assets 目录下新建名为 litepal.xml 的的xml文件。打开litepal.xml将代码改成如下内容<a id="more"></a><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="utf-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">litepal</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    数据库名，例如：</span></span><br><span class="line"><span class="comment">    &lt;dbname value="demo" /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dbname</span> <span class="attr">value</span>=<span class="string">"demo"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    数据库版本号，例如：</span></span><br><span class="line"><span class="comment">    &lt;version value="1" /&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span> <span class="attr">value</span>=<span class="string">"1"</span> /&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    指定映射模型，下面会讲到，例如：</span></span><br><span class="line"><span class="comment">    &lt;list&gt;</span></span><br><span class="line"><span class="comment">    &lt;mapping class="com.test.model.Reader" /&gt;</span></span><br><span class="line"><span class="comment">    &lt;mapping class="com.test.model.Magazine" /&gt;</span></span><br><span class="line"><span class="comment">    &lt;/list&gt;</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">list</span>&gt;</span>  </span><br><span class="line"><span class="tag">&lt;/<span class="name">litepal</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>最后、配置AndroidManifest.xml，在application加入</p><pre><code>android:name=&quot;org.litepal.LitePalApplication&quot;</code></pre><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">    <span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:name</span>=<span class="string">"org.litepal.LitePalApplication"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"i Note"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        </span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这样算是配置完了。还是比较简单的。</p><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><ul><li>首先我们先创建一个notelist_SQLite类，对应的是数据库中的notelist_SQLite表<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.litepal.crud.LitePalSupport;</span><br><span class="line"><span class="comment">//notelist_SQLite继承于LitePalSupport</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">notelist_SQLite</span> <span class="keyword">extends</span> <span class="title">LitePalSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">  </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNote</span><span class="params">(String note)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.note = note;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> note;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>看到这个类，你应该知道怎么往表里添加数据了吧，面对对象的思维来表的操作是不是很直直观.hhh。。</p><ul><li><p>接下来需要把这个映射模型添加到刚才的litepal.xml中。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapping</span> <span class="attr">class</span> = <span class="string">"com.example.a73233.i_note.notelist_SQLite"</span>&gt;</span><span class="tag">&lt;/<span class="name">mapping</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>我们对这个表进行任意操做(如：增，删)时就会自动在数据库生成这个表了</p><h3 id="升级数据库"><a href="#升级数据库" class="headerlink" title="升级数据库"></a>升级数据库</h3><p>这个简单</p></li><li>每次升级数据库，即：修改notelist_SQLite类，或者增加一个新的类。就在litepal,xml的版本号那里，将1改成2就行了。</li><li><p>这里在notelist_SQLite类增加了data</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">notelist_SQLite</span> <span class="keyword">extends</span> <span class="title">LitePalSupport</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String note;</span><br><span class="line">    <span class="keyword">private</span> String date;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setNote</span><span class="params">(String note)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.note = note;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getNote</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> note;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setDate</span><span class="params">(String date)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.date = date;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> date;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>修改litepal,xml的版本号</p><pre><code>&lt;version value=&quot;2&quot; /&gt;</code></pre><p>这就完成了数据库的升级</p><h3 id="向数据库增加数据"><a href="#向数据库增加数据" class="headerlink" title="向数据库增加数据"></a>向数据库增加数据</h3><p>直接上代码，看注释</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">String text = <span class="string">"English text"</span>;</span><br><span class="line">String date = <span class="string">"2019/2/14"</span>;</span><br><span class="line">notelist_SQLite note = <span class="keyword">new</span> notelist_SQLite();  <span class="comment">//获取对象</span></span><br><span class="line">note.set(text); <span class="comment">//增加数据</span></span><br><span class="line">note.set(date);</span><br><span class="line">note.save();   <span class="comment">//保存数据</span></span><br></pre></td></tr></table></figure></li></ul><h3 id="更新数据"><a href="#更新数据" class="headerlink" title="更新数据"></a>更新数据</h3><p>第一种方法LitePal.find(notelist_SQLite.class, id);找到对应表格的id，将其中数据修改<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">notelist_SQLite note = LitePal.find(notelist_SQLite.class, id);</span><br><span class="line">noteSQ.setDate(<span class="string">"2019年2月14日"</span>);  <span class="comment">//设置更新的数据</span></span><br><span class="line">noteSQ.save();</span><br></pre></td></tr></table></figure></p><p>第二种方法，用 update(id); 将对应id的数据修改<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">notelist_SQLite noteSQ = <span class="keyword">new</span> notelist_SQLite();</span><br><span class="line">noteSQ.setDate(<span class="string">"2019年2月14日"</span>);  <span class="comment">//设置更新的数据</span></span><br><span class="line">noteSQ.update(id );</span><br></pre></td></tr></table></figure></p><p>第三种方法，updateAll(); 用法看注释<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">notelist_SQLite noteSQ = <span class="keyword">new</span> notelist_SQLite();</span><br><span class="line">noteSQ.setDate(<span class="string">"2019年2月14日"</span>);  <span class="comment">//设置更新的数据</span></span><br><span class="line">noteSQ.updateAll(<span class="string">"note = ?"</span>, <span class="string">"English text"</span>);</span><br><span class="line"><span class="comment">//这里指定note内容是“English text”的表格的Date会被修改成</span></span><br><span class="line"><span class="comment">//"2019年2月14日"如果没有指定，则会修改所有表格的内容。</span></span><br></pre></td></tr></table></figure></p><h3 id="删除数据"><a href="#删除数据" class="headerlink" title="删除数据"></a>删除数据</h3><p>第一种方法，LitePal.delete(notelist_SQLite.class, id);将对应id的表删除。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LitePal.delete(notelist_SQLite.class, id )；</span><br></pre></td></tr></table></figure></p><p>  第二种方法，LitePal.deleteAll();指定删除的数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">LitePal.deleteAll(notelist_SQLite.class,<span class="string">"note = ?"</span>,<span class="string">"English text"</span>);</span><br></pre></td></tr></table></figure></p><h3 id="查询信息"><a href="#查询信息" class="headerlink" title="查询信息"></a>查询信息</h3><p>其实AUDQ都差不多，先看第一种，查询指定id<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">notelist_SQLite note = LitePal.find(notelist_SQLite.class, id);</span><br><span class="line">String text = note.getNote();</span><br></pre></td></tr></table></figure></p><p>第二种，查询所有的数据<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">List&lt;notelist_SQLite&gt; note = </span><br><span class="line">LitePal.findAll(notelist_SQLite.class); <span class="comment">//找出所有数据将其放在List集合</span></span><br></pre></td></tr></table></figure></p><p>还有更多更复杂和更有用的查询方式可以查看LitePal的API。</p><ul><li>LitePal的基本操作就介绍完了，还有其他的操作，如: 多线程异步操作、监听数据库创建或升级。可以查看<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="noopener">https://github.com/LitePalFramework/LitePal</a></li><li>本文编写参考于：<br><a href="https://www.baidu.com/s?ie=utf-8&amp;f=8&amp;rsv_bp=1&amp;rsv_idx=1&amp;tn=baidu&amp;wd=%E7%AC%AC%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81&amp;oq=litepal%25E6%2593%258D%25E4%25BD%259Csqlite&amp;rsv_pq=9929d52700008f29&amp;rsv_t=2ffdjB%2B6VLYGqPtySqC%2BB%2Bdj4ARtl2f9B8%2FiGVgwyTjp0%2BIoPu2u1ACE%2BF4&amp;rqlang=cn&amp;rsv_enter=1&amp;rsv_sug3=100&amp;rsv_sug1=43&amp;rsv_sug7=101&amp;bs=litepal%E6%93%8D%E4%BD%9Csqlite" target="_blank" rel="noopener">第一行代码</a>和<a href="https://github.com/LitePalFramework/LitePal" target="_blank" rel="noopener">https://github.com/LitePalFramework/LitePal</a></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;什么是LitePal&quot;&gt;&lt;a href=&quot;#什么是LitePal&quot; class=&quot;headerlink&quot; title=&quot;什么是LitePal?&quot;&gt;&lt;/a&gt;什么是LitePal?&lt;/h3&gt;&lt;p&gt;LitePal是Github上的开源数据库框架，使用它呢，可以使我们不需要直接用SQL语句就可以操作安卓自带的SQLite数据库，而是用&lt;strong&gt;面对对象&lt;/strong&gt;的思维去操着数据库，这对于只接触过Java没接触过SQL的小白(比如笔者)简直是一大福音。这里介绍Android Studio &lt;strong&gt;Java语言&lt;/strong&gt;下使用LitePal。&lt;/p&gt;
&lt;h3 id=&quot;配置LitePal&quot;&gt;&lt;a href=&quot;#配置LitePal&quot; class=&quot;headerlink&quot; title=&quot;配置LitePal&quot;&gt;&lt;/a&gt;配置LitePal&lt;/h3&gt;&lt;p&gt;第一步、在app/build.gradle的dependencies中添加依赖：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;implementation &amp;apos;org.litepal.android:java:3.0.0&amp;apos;
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;第二步、在 app/src/main 目录下新建名为 assets 的目录，在 assets 目录下新建名为 litepal.xml 的的xml文件。打开litepal.xml将代码改成如下内容
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
      <category term="数据库" scheme="http://yoursite.com/tags/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Android--文件存储</title>
    <link href="http://yoursite.com/2019/02/12/Android-%E6%96%87%E4%BB%B6%E5%AD%98%E5%82%A8/"/>
    <id>http://yoursite.com/2019/02/12/Android-文件存储/</id>
    <published>2019-02-12T10:54:59.000Z</published>
    <updated>2019-02-12T10:55:29.151Z</updated>
    
    <content type="html"><![CDATA[<p>移动数据的存储方式之一就是文件存储，这里对其进行介绍。</p><h2 id="使用特点与对象"><a href="#使用特点与对象" class="headerlink" title="使用特点与对象"></a>使用特点与对象</h2><p>特点：</p><blockquote><p>不会对数据进行初始化处理，原封不动地讲数据存储到文件中</p></blockquote><p>一般这几种数据可以用文件对数据进行存储：</p><blockquote><ul><li>简单的文本数据</li><li>二进制数据<a id="more"></a></li></ul></blockquote><h2 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h2><p>Android文件存储的方法代码和Java文件存储思路是一样的。但是Android文件存储创建文件和Java有所区别。这里Context类提供了一个openFileOutput方法指定存储数据的文件，如果指定文件不存在则会创建该文件。此方法接受两个参数：</p><ul><li>第一个参数：指定的文件名</li><li>第二个参数：文件的操作方式，有两种可供选择：<blockquote><p>MODE_APPEND 追加内容<br>MODE_PRIVATE 覆盖之前的内容</p></blockquote></li></ul><h3 id="写入文件"><a href="#写入文件" class="headerlink" title="写入文件"></a>写入文件</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">save</span><span class="params">(String text)</span></span>&#123;</span><br><span class="line">    FileOutputStream out = <span class="keyword">null</span>;</span><br><span class="line">    BufferedWriter writer = <span class="keyword">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//文件名为"data", 操作方式为追加</span></span><br><span class="line">        out = openFileOutput(<span class="string">"data"</span>, Context.MODE_APPEND);</span><br><span class="line">        writer = <span class="keyword">new</span> BufferedWriter(<span class="keyword">new</span> OutputStreamWriter(out));</span><br><span class="line">        writer.write(text);</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(writer != <span class="keyword">null</span>)&#123;</span><br><span class="line">                writer.close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="写出文件"><a href="#写出文件" class="headerlink" title="写出文件"></a>写出文件</h3><p>这里将数据读取出来存放在Builder，然后将其返回<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">load</span><span class="params">()</span></span>&#123;</span><br><span class="line">    FileInputStream in = <span class="keyword">null</span>;</span><br><span class="line">    BufferedReader reader = <span class="keyword">null</span>;</span><br><span class="line">    StringBuilder content = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">    <span class="comment">//指定读取文件"data"</span></span><br><span class="line">        in = openFileInput(<span class="string">"data"</span>);</span><br><span class="line">        reader = <span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> InputStreamReader(in));</span><br><span class="line">        String line = <span class="string">""</span>;</span><br><span class="line">        <span class="keyword">while</span> ((line = reader.readLine()) != <span class="keyword">null</span>)&#123;</span><br><span class="line">            content.append(line);  <span class="comment">//将数据放在Builder</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (reader != <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reader.close();</span><br><span class="line">            &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> content.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;移动数据的存储方式之一就是文件存储，这里对其进行介绍。&lt;/p&gt;
&lt;h2 id=&quot;使用特点与对象&quot;&gt;&lt;a href=&quot;#使用特点与对象&quot; class=&quot;headerlink&quot; title=&quot;使用特点与对象&quot;&gt;&lt;/a&gt;使用特点与对象&lt;/h2&gt;&lt;p&gt;特点：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;不会对数据进行初始化处理，原封不动地讲数据存储到文件中&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;一般这几种数据可以用文件对数据进行存储：&lt;/p&gt;
&lt;blockquote&gt;
&lt;ul&gt;
&lt;li&gt;简单的文本数据&lt;/li&gt;
&lt;li&gt;二进制数据
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android--Toolbar-制作标题</title>
    <link href="http://yoursite.com/2019/02/07/Android-Toolbar/"/>
    <id>http://yoursite.com/2019/02/07/Android-Toolbar/</id>
    <published>2019-02-07T10:00:37.000Z</published>
    <updated>2019-02-18T13:12:01.108Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Android自带的那个Actionbar是不是感觉有点low，2014年Google推出了Material这种精美界面设计，而Toolbar便是其中的一个控件，用于制作自己的标题。<a id="more"></a></p></blockquote><p>效果如图:<br><img src="/images/toolbar.png" alt=""><br>Toolbar还可以做出更好的效果但这里至介绍其中其中几种。<br>制作步骤如下：</p><h3 id="隐藏掉原来的标题"><a href="#隐藏掉原来的标题" class="headerlink" title="隐藏掉原来的标题"></a>隐藏掉原来的标题</h3><p>打开/value/styles.xml文件修改代码<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">name</span>=<span class="string">"AppTheme"</span> <span class="attr">parent</span>=<span class="string">"Theme.AppCompat.Light.NoActionBar"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="xml"><span class="comment">&lt;!--将原代码修改成如下所示--&gt;</span></span></span><br><span class="line"><span class="undefined">...</span></span><br></pre></td></tr></table></figure></p><h3 id="在布局中加入toolbar控件"><a href="#在布局中加入toolbar控件" class="headerlink" title="在布局中加入toolbar控件"></a>在布局中加入toolbar控件</h3><p>这里要先加入命名空间</p><blockquote><p>xmlns:app=”<a href="http://schemas.android.com/apk/res-auto&quot;" target="_blank" rel="noopener">http://schemas.android.com/apk/res-auto&quot;</a></p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v4.widget.DrawerLayout</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span></span></span><br><span class="line"><span class="tag"><span class="attr">...</span></span></span><br><span class="line">&lt;FrameLayout</span><br><span class="line">android:id="@+id/Layout_add"</span><br><span class="line">android:layout_width="match_parent"</span><br><span class="line">android:layout_height="match_parent"&gt;</span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">android.support.v7.widget.Toolbar</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/toolbar"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:background</span>=<span class="string">"@color/pink"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:theme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Dark.ActionBar"</span></span></span><br><span class="line"><span class="tag"><span class="attr">app:popupTheme</span>=<span class="string">"@style/ThemeOverlay.AppCompat.Light"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">FrameLayout</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="修改activity中的代码"><a href="#修改activity中的代码" class="headerlink" title="修改activity中的代码"></a>修改activity中的代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">setContentView(R.layout.activity_add);</span><br><span class="line">Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);</span><br><span class="line">setSupportActionBar(toolbar);  <span class="comment">//加载Toolbar控件</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>这样Toolbar标题算是做出来了，但是有点单调。我们还可以设置Toolbar其他元素，常用的元素大抵有这些：</p><blockquote><ul><li>setNavigationIcon<br>即设定 up button 的图标，在Material 的介面，up button样式也有区别于ActionBar。</li><li>setLogo<br>APP 的图标。</li><li>setTitle<br>主标题。</li><li>setSubtitle<br>副标题。</li><li>setOnMenuItemClickListener<br>设定菜单各按鈕的动作。</li></ul></blockquote><h3 id="setNavigationIcon"><a href="#setNavigationIcon" class="headerlink" title="setNavigationIcon"></a>setNavigationIcon</h3><p>我们示例一下setNavigationIcon。先在drawable保存好图标。在activity中加入代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Toolbar toolbar = (Toolbar)findViewById(R.id.toolbar);</span><br><span class="line">setSupportActionBar(toolbar);</span><br><span class="line">getSupportActionBar().setDisplayShowTitleEnabled(<span class="keyword">false</span>);<span class="comment">//隐藏标题</span></span><br><span class="line">toolbar.setNavigationIcon(R.drawable.back_white);       <span class="comment">//加载图标</span></span><br><span class="line">toolbar.setNavigationOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;   <span class="comment">//为图标设置监听器</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">finish();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><h3 id="标题居中"><a href="#标题居中" class="headerlink" title="标题居中"></a>标题居中</h3><p>找了一下Toolbar标题居中的办法最通用的还是讲原来标题隐藏掉，然后做一个TextView做标题。<br>上面setNavigationIcon我们已经把标题隐藏了。只要往布局加入TextView就行了。这里另外添加了一张图和文字一起作为标题。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">&lt;TextView</span><br><span class="line">android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_gravity=<span class="string">"center_horizontal"</span></span><br><span class="line">android:layout_marginTop=<span class="string">"9dp"</span></span><br><span class="line">android:layout_marginLeft=<span class="string">"10dp"</span></span><br><span class="line">android:text=<span class="string">" Note"</span></span><br><span class="line">android:textColor=<span class="string">"@color/white"</span></span><br><span class="line">android:textSize=<span class="string">"30dp"</span> /&gt;</span><br><span class="line"></span><br><span class="line">&lt;ImageView</span><br><span class="line">android:layout_width=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_height=<span class="string">"wrap_content"</span></span><br><span class="line">android:layout_gravity=<span class="string">"center_horizontal"</span></span><br><span class="line">android:layout_marginTop=<span class="string">"14dp"</span></span><br><span class="line">android:layout_marginRight=<span class="string">"30dp"</span></span><br><span class="line">android:src=<span class="string">"@drawable/i_white2"</span> /&gt;</span><br></pre></td></tr></table></figure></p><h3 id="设置菜单"><a href="#设置菜单" class="headerlink" title="设置菜单"></a>设置菜单</h3><p>设置菜单和Actionbar基本一样的，区别在于菜单xml文件中也需加入命名空间</p><blockquote><p>xmlns:app=”<a href="http://schemas.android.com/apk/res-auto&quot;" target="_blank" rel="noopener">http://schemas.android.com/apk/res-auto&quot;</a></p></blockquote><p>另外还有一个要讲的菜单属性app:showAsAction=”always”，这里设置菜单action图标在标题中显示。当然这里不一定是always。还可以是如下设置。</p><blockquote><p>always 一直显示在Toolbar中<br>ifRoom 屏幕空间足够时显示在Toolbar<br>never 只显示在菜单中<br>需要注意，Toolbar中action只显示图标，菜单中只显示文字。</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Android自带的那个Actionbar是不是感觉有点low，2014年Google推出了Material这种精美界面设计，而Toolbar便是其中的一个控件，用于制作自己的标题。
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android--简单的UI开发</title>
    <link href="http://yoursite.com/2019/01/28/Android-%E7%AE%80%E5%8D%95%E7%9A%84UI%E5%BC%80%E5%8F%91/"/>
    <id>http://yoursite.com/2019/01/28/Android-简单的UI开发/</id>
    <published>2019-01-28T11:15:32.000Z</published>
    <updated>2019-02-01T02:42:19.635Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍Android一些基本控件的使用，四种基本布局，自定义控件，以及两种滚动控件。</p><h2 id="Button"><a href="#Button" class="headerlink" title="Button"></a>Button</h2><p>在布局中添加一个按钮</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">Button</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/button_1"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:text</span>=<span class="string">"button_1"</span></span></span><br><span class="line"><span class="tag">        /&gt;</span></span><br></pre></td></tr></table></figure><ul><li><p>android:id=”@+id/button_1” 此句是为当前布局定义一个唯一标识符<a id="more"></a></p></li><li><p>至于按钮的宽与高有两种选择：</p><blockquote><p>math_parent和父元素一样<br>wrap_content仅仅包裹住里面的内容就行</p></blockquote></li></ul><h2 id="在活动中使用Toast"><a href="#在活动中使用Toast" class="headerlink" title="在活动中使用Toast"></a>在活动中使用Toast</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    setContentView(R.layout.first_layout);</span><br><span class="line">    Button button1 = (Button)findViewById(R.id.button_1);<span class="comment">//用findViewById();获得view对象再向下转型</span></span><br><span class="line">    <span class="comment">//注册监听器</span></span><br><span class="line">    button1.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">            <span class="comment">//用静态方法创造出一个Toast对象再调用show()方法显示出来</span></span><br><span class="line">            Toast.makeText(MainActivity.<span class="keyword">this</span>, <span class="string">"显示文本"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line">            <span class="comment">//第一个参数Context对象，第二是显示文本，第三是时长</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="在活动中使用Menu"><a href="#在活动中使用Menu" class="headerlink" title="在活动中使用Menu"></a>在活动中使用Menu</h2><p>步骤：</p><ul><li>在res中新建一个目录命名为menu,在menu目录下新建一个Menu resource文件</li><li><p>在.xml文件下，用<item>创建菜单项，这里创造了两个菜单项</item></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">menu</span> <span class="attr">xmlns:android</span>=<span class="string">"http://schemas.android.com/apk/res/android"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/add_item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"add"</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">item</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:id</span>=<span class="string">"@+id/remove_item"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:title</span>=<span class="string">"remove"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">menu</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>在Activity中Ctrl+o重写onCreatOptionsMenu()方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreatOptionsMenu</span><span class="params">(Menu menu)</span></span>&#123;</span><br><span class="line">getMenuInflater().inflate(R.menu.menu1,menu);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>这样已经可以显示出一个菜单了，但是似乎没什么意义，我们可以用菜单来响应事件(例子响应的是Toast)，这需要在Activity重写两个方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onCreateOptionsMenu</span><span class="params">(Menu menu)</span></span>&#123;</span><br><span class="line">getMenuInflater().inflate(R.menu.menu1,menu);</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">onOptionsItemSelected</span><span class="params">(MenuItem item)</span> </span>&#123;</span><br><span class="line"><span class="keyword">switch</span> (item.getItemId())&#123;</span><br><span class="line"><span class="keyword">case</span> R.id.add_item :</span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, <span class="string">"Add"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> R.id.remove_item :</span><br><span class="line">Toast.makeText(<span class="keyword">this</span>, <span class="string">"Remove"</span>,Toast.LENGTH_SHORT).show();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="TextView"><a href="#TextView" class="headerlink" title="TextView"></a>TextView</h2><p>TextView控件是在程序中显示一段文字，当然你可以改变文字的大小，颜色，位置等等。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:text</span>=<span class="string">"显示一段文字"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:textSize</span>=<span class="string">"24sp"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:textColor</span>=<span class="string">"#00ff00"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:gravity</span>=<span class="string">"center"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure><h2 id="EditText"><a href="#EditText" class="headerlink" title="EditText"></a>EditText</h2><p>EditText是设置一个对话框，这个在人机交互尤其重要。<br>android:hint=”输入文本”/&gt;，这个属性是制定了一段提示性文字，等待用户输入文字后会消失。<br>android:maxLines=”2”这个属性制定了输入文字最大行数，当输入文字超过这么多行文字便会向上滚动。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">EditText</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:hint</span>=<span class="string">"输入文本"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:maxLines</span>=<span class="string">"2"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>获得editText输入的文字。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">text = (EditText)findViewById(R.id.edit_text)</span><br><span class="line">String input_text = text.getText().toString();</span><br></pre></td></tr></table></figure></li></ul><h2 id="ImageView"><a href="#ImageView" class="headerlink" title="ImageView"></a>ImageView</h2><p>这是在界面显示一张图片的控件<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/image_view"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:src</span>=<span class="string">"@drawable/aaa"</span></span></span><br><span class="line"><span class="tag">/&gt;</span></span><br></pre></td></tr></table></figure></p><p>也可以动态修改图片<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ImageView imageView = (ImageView)findViewById(R.id.image_view);</span><br><span class="line">imageView.setImageResource(R.drawable.bbb);</span><br></pre></td></tr></table></figure></p><h2 id="ProgressBar"><a href="#ProgressBar" class="headerlink" title="ProgressBar"></a>ProgressBar</h2><p>此控件显示进度条，在布局中加入此控件的代码和普通控件差不多就不多说了。<br>但是总不能让进度条一直显示吧,那么怎么在数据加载完了把它去掉呢。<br>这就涉及到一个属性visibility，所有控件都有这个属性，它可<strong>指定控件3中状态</strong>：</p><blockquote><p>visible 控件可见。<br>invisible 控件不可见但仍然占据空间<br>gone 控件不可见 </p></blockquote><h2 id="AlertDialog"><a href="#AlertDialog" class="headerlink" title="AlertDialog"></a>AlertDialog</h2><p>AlertDialog可在界面弹出一个对话框，词对话框会屏蔽掉其他控件的交互能力，一般用于提示一些提示警告用户操作消息。<br>首先在Activity输入如下代码</p><blockquote><ul><li>新建AlertDialog对象</li><li>给对话框设置标题，内容，可否取消等。</li><li>setPositiveButton设置确定点击事件</li><li>setNegativeButton设定取消点击事件</li><li>调用show()显示出来</li></ul></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">AlertDialog.Builder dialog = <span class="keyword">new</span> AlertDialog.Builder(Main3Activity.<span class="keyword">this</span>);</span><br><span class="line">dialog.setTitle(<span class="string">"警告"</span>);</span><br><span class="line">dialog.setMessage(<span class="string">"测试"</span>);</span><br><span class="line">dialog.setCancelable(<span class="keyword">false</span>);</span><br><span class="line">dialog.setPositiveButton(<span class="string">"OK"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">dialog.setNegativeButton(<span class="string">"Cancle"</span>, <span class="keyword">new</span> DialogInterface.OnClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(DialogInterface dialog, <span class="keyword">int</span> which)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line">dialog.show();</span><br></pre></td></tr></table></figure><h2 id="四种基本布局"><a href="#四种基本布局" class="headerlink" title="四种基本布局"></a>四种基本布局</h2><h3 id="LinearLayout线性布局"><a href="#LinearLayout线性布局" class="headerlink" title="LinearLayout线性布局"></a>LinearLayout线性布局</h3><ul><li>这种布局控件线性排列，可水平排列(vertical)，也可垂直排列(horizontal),由android:orientation指定。</li><li>这个布局还有一个重要的属性，android:layout_weight=”填比例”，这个属性可以设置个个控件所占空间的比例。但是不要忘了将android:layout_width=”0dp”设置成0dp。</li></ul><h3 id="RelativeLayout"><a href="#RelativeLayout" class="headerlink" title="RelativeLayout"></a>RelativeLayout</h3><ul><li>这种布局是相对位置调整控件的位置。</li><li>首先是相对父布局例如：android:layout_alignParentleft=”true”这就是在屏幕最左边。其他也照葫芦画瓢。</li><li>相对其他控件布局例如：android:layout_toRightof=”@id/button_1”这是在按钮1的上方。</li></ul><h3 id="FrameLayout"><a href="#FrameLayout" class="headerlink" title="FrameLayout"></a>FrameLayout</h3><ul><li>这种布局也叫帧布局，默认所有组件都在左上角。<h3 id="百分比布局"><a href="#百分比布局" class="headerlink" title="百分比布局"></a>百分比布局</h3></li><li>这种布局有些复杂，这里先不说了。</li></ul><h2 id="自定义控件"><a href="#自定义控件" class="headerlink" title="自定义控件"></a>自定义控件</h2><h3 id="引入一个自定义的布局"><a href="#引入一个自定义的布局" class="headerlink" title="引入一个自定义的布局"></a>引入一个自定义的布局</h3><p>有时候通过<strong>引入</strong>的方式使用一个频繁被使用的布局能节省很多代码量，这里新建了一个子布局text。下面在主布局中写入如下代码将其引入：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">include</span> <span class="attr">layout</span>=<span class="string">"@layout/text"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h3 id="自定一个控件"><a href="#自定一个控件" class="headerlink" title="自定一个控件"></a>自定一个控件</h3><p>有时候我们需要重复的为同一个控件绑定同一个事件，比如说Back这个按钮，显然，无论在哪一个活动中，这个按钮和其绑定的事件都是一样的。这时候我们就可以自定义一个控件，然后通过引入的方式代码的重复。</p><p>首先需要了解一下控件和布局的继承关系</p><div style="width: 500px; margin: auto"><img src="/images/android.png" alt=""></div><p>第二步新建好一个布局(这里新建了text布局，布局中加入了button3这个按钮)</p><p>然后新建一个class命名为textLayout为button3绑定事件<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义控件</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">textLayout</span> <span class="keyword">extends</span> <span class="title">LinearLayout</span> </span>&#123;</span><br><span class="line"><span class="comment">//重写LinearLayout有两个参数的构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">textLayout</span><span class="params">(Context context, AttributeSet attrs)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context,attrs);</span><br><span class="line">        LayoutInflater.from(context).inflate(R.layout.text, <span class="keyword">this</span>);<span class="comment">//动态加载text布局</span></span><br><span class="line">        Button button3 = (Button)findViewById(R.id.bottom_3);<span class="comment">//注册事件</span></span><br><span class="line">        button3.setOnClickListener(<span class="keyword">new</span> OnClickListener() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line">                ((Activity)getContext()).finish();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后将这个自定好的textLayout引入布局中就行，代码和加入一个普通控件一样，但是因为这是我们自定义的控件，包名是不可省的。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">com.example.a73233.activitytest2.textLayout</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h2 id="ListView"><a href="#ListView" class="headerlink" title="ListView"></a>ListView</h2><p>这是最常用也是最难的控件。这个控件的效果是可以让屏幕外的数据滚动进来，屏幕可见的数据也可以滚动出去，这样就课以显示大量的<strong>数据</strong>了。这些数据可以来源于网上，也可来源于数据库等等。<br>这里以一个字符串数组做演示。<br>第一步，先在布局加入ListView元素。布局为线性布局<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ListView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/List_view"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"match_parent"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"match_parent"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ListView</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>第二步，将数据出传入控件，然而这些数据无法直接传过去，需要借助适配器，这里用的是ArrayAdapter适配器<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main4Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    String[] s = &#123;<span class="string">"钢铁侠1"</span>,<span class="string">"蜘蛛侠1"</span>,<span class="string">"蜘蛛侠2"</span>,<span class="string">"钢铁侠2"</span>,<span class="string">"t"</span>,<span class="string">"y"</span>,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span></span><br><span class="line">    ,<span class="string">"e"</span>,<span class="string">"f"</span>,<span class="string">"g"</span>,<span class="string">"hi"</span>,<span class="string">"j"</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main4);</span><br><span class="line">        <span class="comment">//适配器</span></span><br><span class="line">        ArrayAdapter&lt;String&gt; adapter = <span class="keyword">new</span> ArrayAdapter&lt;String&gt;(Main4Activity.<span class="keyword">this</span>, android.R.layout.simple_list_item_1, s);</span><br><span class="line">        ListView listView = (ListView) findViewById(R.id.List_view);</span><br><span class="line">        listView.setAdapter(adapter);<span class="comment">//将适配的数据传过去</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后运行一下程序就有向下滚动的效果了。</p><h3 id="丰富你的ListView"><a href="#丰富你的ListView" class="headerlink" title="丰富你的ListView"></a>丰富你的ListView</h3><p>仅仅显示字符串多没意思，现在给它加如图片，给ListView加上图片或者其他什么的，其实就是传入这个控件的数据和布局变了，因此我们先自定义一个布局，自然也要再自定义一个适配器传送数据。</p><h4 id="先自定义一个布局"><a href="#先自定义一个布局" class="headerlink" title="先自定义一个布局"></a>先自定义一个布局</h4><p>这里是一张图片，一个文本。<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">ImageView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/photo1_Image"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">TextView</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:id</span>=<span class="string">"@+id/name"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_width</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_height</span>=<span class="string">"wrap_content"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:layout_gravity</span>=<span class="string">"center_vertical"</span></span></span><br><span class="line"><span class="tag"><span class="attr">android:textSize</span>=<span class="string">"24sp"</span>/&gt;</span></span><br></pre></td></tr></table></figure></p><h4 id="自定义适配器"><a href="#自定义适配器" class="headerlink" title="自定义适配器"></a>自定义适配器</h4><p>我们传过去的是一张图加一个文本，这并不是基本类型，而适配器是泛型，所以我们可以先定义一个适配类型<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//定义一个实体类作为ListView的适配类型</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">photo1</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span>  <span class="keyword">int</span> ID;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">photo1</span><span class="params">(String name, <span class="keyword">int</span> ID)</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.ID = ID;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getname</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getID</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> ID;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>然后就可以开始定义我们的适配器了。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//自定义一个适配器，适配类型为photo1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">photo1Adapter</span> <span class="keyword">extends</span> <span class="title">ArrayAdapter</span>&lt;<span class="title">photo1</span>&gt; </span>&#123;<span class="comment">//继承于ArrayAdapter这个适配器类</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> resourceID;</span><br><span class="line">    <span class="comment">//重写构造方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">photo1Adapter</span><span class="params">(Context context, <span class="keyword">int</span> textID, List&lt;photo1&gt; objects)</span></span>&#123;</span><br><span class="line">        <span class="keyword">super</span>(context,textID,objects);</span><br><span class="line">        resourceID = textID;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//重写getView()方法，这个方法会在子项布局滚入屏幕时被调用。</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span>&#123;</span><br><span class="line">        photo1 photo11 = getItem(position);<span class="comment">//获取photo1的实例</span></span><br><span class="line">        <span class="comment">//加载传入的自定义布局</span></span><br><span class="line">        View view = LayoutInflater.from(getContext()).inflate(resourceID,parent,<span class="keyword">false</span>);</span><br><span class="line">        TextView textView = (TextView)view.findViewById(R.id.name);</span><br><span class="line">        ImageView imageView = (ImageView)view.findViewById(R.id.photo1_Image);</span><br><span class="line">        textView.setText(photo11.getname());<span class="comment">//设置显示的文字</span></span><br><span class="line">        imageView.setImageResource(photo11.getID());<span class="comment">//设置显示的图片</span></span><br><span class="line">        <span class="keyword">return</span> view;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>最后再活动中将数据传入ListView控件就行了<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main4Activity</span> <span class="keyword">extends</span> <span class="title">AppCompatActivity</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;photo1&gt; photo1List = <span class="keyword">new</span> ArrayList&lt;&gt;();<span class="comment">//定义集合存数据</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.activity_main4);</span><br><span class="line">        initphoto1s();    <span class="comment">//初始化信息</span></span><br><span class="line">        <span class="comment">//适配器</span></span><br><span class="line">        photo1Adapter adapter =<span class="keyword">new</span> photo1Adapter(Main4Activity.<span class="keyword">this</span>,</span><br><span class="line">                R.layout.photo1 ,photo1List);</span><br><span class="line">        ListView listView = (ListView)findViewById(R.id.List_view);</span><br><span class="line">        listView.setAdapter(adapter);<span class="comment">//将传数据过去</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">initphoto1s</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;<span class="number">2</span>; i++)&#123;</span><br><span class="line">            photo1 IronMan = <span class="keyword">new</span> photo1(<span class="string">"IronMan"</span>, R.drawable.aaa);</span><br><span class="line">            photo1List.add(IronMan);</span><br><span class="line">            photo1 SpiderMan = <span class="keyword">new</span> photo1(<span class="string">"SpiderMan"</span>,R.drawable.bbb);</span><br><span class="line">            photo1List.add(SpiderMan);</span><br><span class="line">            photo1 Sky = <span class="keyword">new</span> photo1(<span class="string">"Sky"</span>,R.drawable.ddd);</span><br><span class="line">            photo1List.add(Sky);</span><br><span class="line">            photo1 Vter = <span class="keyword">new</span> photo1(<span class="string">"抗战胜利"</span>,R.drawable.eee);</span><br><span class="line">            photo1List.add(Vter);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h3 id="提升ListView运行效率"><a href="#提升ListView运行效率" class="headerlink" title="提升ListView运行效率"></a>提升ListView运行效率</h3><p>ListView之所以说难用，是因为它有很多细节可以优化，其中之一就是运行效率。前边我们自定义适配器时，重写了getView()方法,我们每次都会加载一个布局进来，当我们快速滚动的时候性能就跟不上了。<br>运行优化一，防止布局重复加载(比如下滑再上滑时)修改自定义适配器的getView()代码<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line"><span class="comment">//加载传入的自定义布局</span></span><br><span class="line">photo1 photo11 = getItem(position);<span class="comment">//获取photo1的实例</span></span><br><span class="line"><span class="comment">//加载传入的自定义布局</span></span><br><span class="line">View view</span><br><span class="line"><span class="keyword">if</span>(convertView == <span class="keyword">null</span>)&#123;</span><br><span class="line"> view= LayoutInflater.from(getContext()).inflate(resourceID,parent,<span class="keyword">false</span>);</span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">view = convertView;<span class="comment">//convertView会缓存之前加载过的布局</span></span><br><span class="line">&#125;</span><br><span class="line">TextView textView = (TextView)view.findViewById(R.id.name);</span><br><span class="line">ImageView imageView = (ImageView)view.findViewById(R.id.photo1_Image);</span><br><span class="line">...</span><br></pre></td></tr></table></figure></p><p>运行优化二，防止控件重复获取(未修改时是每加载一次布局就获取一次控件)修改自定义适配器的getView()代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">...&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> View <span class="title">getView</span><span class="params">(<span class="keyword">int</span> position, View convertView, ViewGroup parent)</span></span>&#123;</span><br><span class="line">photo1 photo11 = getItem(position);<span class="comment">//获取photo1的实例</span></span><br><span class="line"><span class="comment">//加载传入的自定义布局</span></span><br><span class="line">View view;</span><br><span class="line">veiwHolder veiwholder;</span><br><span class="line"><span class="keyword">if</span>(convertView == <span class="keyword">null</span>)&#123;</span><br><span class="line"> view= LayoutInflater.from(getContext()).inflate(resourceID,parent,<span class="keyword">false</span>);</span><br><span class="line"> veiwholder = <span class="keyword">new</span> veiwHolder();</span><br><span class="line"> veiwholder.imageView = (ImageView)view.findViewById(R.id.photo1_Image);</span><br><span class="line"> veiwholder.textView = (TextView)view.findViewById(R.id.name);</span><br><span class="line"> view.setTag(veiwholder);<span class="comment">//存好veiwholder在view中</span></span><br><span class="line">&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">view = convertView;<span class="comment">//convertView会缓存之前加载过的布局，这里重新获取布局</span></span><br><span class="line">veiwholder = (veiwHolder)view.getTag();<span class="comment">//重新获取veiwholder</span></span><br><span class="line">&#125;</span><br><span class="line">veiwholder.textView.setText(photo11.getname());<span class="comment">//设置显示的文字</span></span><br><span class="line">veiwholder.imageView.setImageResource(photo11.getID());<span class="comment">//设置显示的图片</span></span><br><span class="line"><span class="keyword">return</span> view;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">veiwHolder</span></span>&#123;</span><br><span class="line">ImageView imageView;</span><br><span class="line">TextView textView;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="RecyclerView-更强大的滚动控件"><a href="#RecyclerView-更强大的滚动控件" class="headerlink" title="RecyclerView(更强大的滚动控件)"></a>RecyclerView(更强大的滚动控件)</h2><p>RecyclerView相比ListView细节跟优化，且可以实现横向滚动，瀑布滚动的效果。<br>因为这个控件是新的控件，所以需要手动添加依赖</p><blockquote><p>implementation ‘com.android.support:recyclerview-v7:28.0.0’</p></blockquote><p>这个控件使用方法和ListView差不多，都需要先自定义一个布局和一个适配类型，但是适配器的构造不一样，下面是适配器的代码，解析在注释。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//适配器继承与RecyclerView.Adapter，泛型类为适配器的一个内部类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">photo2Adapter</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">Adapter</span>&lt;<span class="title">photo2Adapter</span>.<span class="title">ViewHolder</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> List&lt;photo1&gt; mphoto2List;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">ViewHolder</span> <span class="keyword">extends</span> <span class="title">RecyclerView</span>.<span class="title">ViewHolder</span></span>&#123;  <span class="comment">//内部类获取控件</span></span><br><span class="line">        TextView textView;</span><br><span class="line">        ImageView imageView;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line">            <span class="keyword">super</span>(view);</span><br><span class="line">            textView = (TextView) view.findViewById(R.id.name);</span><br><span class="line">            imageView = (ImageView) view.findViewById((R.id.photo1_Image));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">photo2Adapter</span><span class="params">(List&lt;photo1&gt; photo2List)</span></span>&#123;  <span class="comment">//构造方法</span></span><br><span class="line">        mphoto2List = photo2List;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创造ViewHolder实例</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ViewHolder <span class="title">onCreateViewHolder</span><span class="params">(ViewGroup parent, <span class="keyword">int</span> viewType)</span></span>&#123;</span><br><span class="line">        View view = LayoutInflater.from(parent.getContext()).inflate(R.layout.photo1,</span><br><span class="line">                parent,<span class="keyword">false</span>);      <span class="comment">//加载布局</span></span><br><span class="line">        ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line">        <span class="keyword">return</span> holder;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//给数据赋值</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onBindViewHolder</span><span class="params">(ViewHolder holder, <span class="keyword">int</span> position)</span></span>&#123;</span><br><span class="line">        photo1 photo2 = mphoto2List.get(position);</span><br><span class="line">        holder.imageView.setImageResource(photo2.getID());</span><br><span class="line">        holder.textView.setText(photo2.getname());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回子项长度</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getItemCount</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> mphoto2List.size();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>适配器同传送数据代码自然不同<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化信息和ListView一样</span></span><br><span class="line"><span class="comment">//适配器传送数据</span></span><br><span class="line">RecyclerView recyclerView = (RecyclerView) findViewById(R.id.recycler_view);  <span class="comment">//获取控件对象</span></span><br><span class="line">LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);            <span class="comment">//指定控件布局方式，将其设置到控件对象中</span></span><br><span class="line">recyclerView.setLayoutManager(layoutManager);</span><br><span class="line">photo2Adapter adapter = <span class="keyword">new</span> photo2Adapter(photo1List);</span><br><span class="line">recyclerView.setAdapter(adapter);</span><br></pre></td></tr></table></figure></p><p>那么如何改成水平滚动呢，只需在传送数据那块代码中添加一句代码即可,当然你可以在布局中调整控件的大小，位置等等，让界面更好看。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">LinearLayoutManager layoutManager = <span class="keyword">new</span> LinearLayoutManager(<span class="keyword">this</span>);</span><br><span class="line">layoutManager.setOrientation(LinearLayoutManager.HORIZONTAL);<span class="comment">//******添加水平滚动代码</span></span><br></pre></td></tr></table></figure></p><p>RecyclerView的点击事件<br>ListView和RecyclerView都有点击事件，这里主要介绍RecyclerView的点击事件。<br>这里在适配器中添加代码，为<strong>最外层布局</strong>和<strong>图片</strong>控件注册事件。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">View photoView;<span class="comment">//*******添加代码定义最外层布局实例</span></span><br><span class="line">TextView textView;</span><br><span class="line">ImageView imageView;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">ViewHolder</span><span class="params">(View view)</span></span>&#123;</span><br><span class="line"><span class="keyword">super</span>(view);</span><br><span class="line">photoView = view;<span class="comment">//*******添加代码保存最外层实例</span></span><br><span class="line">textView = (TextView) view.findViewById(R.id.name);</span><br><span class="line">imageView = (ImageView) view.findViewById((R.id.photo1_Image));</span><br><span class="line">&#125;</span><br><span class="line">....</span><br><span class="line"> <span class="keyword">final</span> ViewHolder holder = <span class="keyword">new</span> ViewHolder(view);</span><br><span class="line"><span class="comment">//*************************************为最外层注册事件</span></span><br><span class="line">holder.photoView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> position = holder.getAdapterPosition();</span><br><span class="line">photo1 photo2 = mphoto2List.get(position);</span><br><span class="line">Toast.makeText(v.getContext(),<span class="string">"你点击的是："</span>+</span><br><span class="line">photo2.getname(),Toast.LENGTH_LONG).show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//*******************************为图片注册事件</span></span><br><span class="line">holder.imageView.setOnClickListener(<span class="keyword">new</span> View.OnClickListener() &#123;</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onClick</span><span class="params">(View v)</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> position = holder.getAdapterPosition();</span><br><span class="line">photo1 photo2 = mphoto2List.get(position);</span><br><span class="line">Toast.makeText(v.getContext(),<span class="string">"你点击的是："</span>+</span><br><span class="line">photo2.getname(),Toast.LENGTH_LONG).show();</span><br><span class="line">&#125;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">//****************************************************************</span></span><br><span class="line"><span class="keyword">return</span> holder;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍Android一些基本控件的使用，四种基本布局，自定义控件，以及两种滚动控件。&lt;/p&gt;
&lt;h2 id=&quot;Button&quot;&gt;&lt;a href=&quot;#Button&quot; class=&quot;headerlink&quot; title=&quot;Button&quot;&gt;&lt;/a&gt;Button&lt;/h2&gt;&lt;p&gt;在布局中添加一个按钮&lt;/p&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;Button&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;@+id/button_1&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_width&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:layout_height&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;wrap_content&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        &lt;span class=&quot;attr&quot;&gt;android:text&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;button_1&quot;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;        /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;android:id=”@+id/button_1” 此句是为当前布局定义一个唯一标识符
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Android--探究Activity</title>
    <link href="http://yoursite.com/2019/01/28/Android-%E6%8E%A2%E7%A9%B6%E6%B4%BB%E5%8A%A8/"/>
    <id>http://yoursite.com/2019/01/28/Android-探究活动/</id>
    <published>2019-01-28T10:37:29.000Z</published>
    <updated>2019-01-31T13:04:39.377Z</updated>
    
    <content type="html"><![CDATA[<h2 id="创建一个活动"><a href="#创建一个活动" class="headerlink" title="创建一个活动"></a>创建一个活动</h2><ul><li>直接右键new -&gt;Activity-&gt;Empty Activity就好了，勾选General…自动添加对应布局，若勾选Launcher会自动设置当前活动为主活动。</li><li>任何活动都要重写onCreate()方法，Android stdio会默认帮我们重写它的构造函数。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></li></ul><a id="more"></a><h2 id="给活动创建和加载布局"><a href="#给活动创建和加载布局" class="headerlink" title="给活动创建和加载布局"></a>给活动创建和加载布局</h2><h3 id="创建布局"><a href="#创建布局" class="headerlink" title="创建布局"></a>创建布局</h3><ul><li>直接右键app/src/main/res-&gt;new-&gt;Directory。然后给新目录命名layout(命名是规定的)。接着右键新建Layout resource，默认根元素为LinearLayout。</li><li>以后再往布局中加入新元素，要在根元素中添加。<h3 id="加载布局"><a href="#加载布局" class="headerlink" title="加载布局"></a>加载布局</h3></li><li>加载布局是在Activity中，在onCreat()中用setContentView(布局文件的id);方法加载id。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">onCreate</span><span class="params">(Bundle savedInstanceState)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">super</span>.onCreate(savedInstanceState);</span><br><span class="line">        setContentView(R.layout.first_layout);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="注册活动"><a href="#注册活动" class="headerlink" title="注册活动"></a>注册活动</h2><ul><li><p>注册活动在Androidmanifest.xml里面，而且Android studio 已经帮我们注册好了。但是我们可以去修改一下里面的内容</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">application</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:allowBackup</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:icon</span>=<span class="string">"@mipmap/ic_launcher"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:label</span>=<span class="string">"@string/app_name"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:roundIcon</span>=<span class="string">"@mipmap/ic_launcher_round"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:supportsRtl</span>=<span class="string">"true"</span></span></span><br><span class="line"><span class="tag">        <span class="attr">android:theme</span>=<span class="string">"@style/AppTheme"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".MainActivity"</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"android.intent.action.MAIN"</span> /&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">application</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>值得注意的是给label指定的内容会成为标题栏(在应用顶部)的内容以及程序的名称</p></li></ul><h2 id="销毁一个活动"><a href="#销毁一个活动" class="headerlink" title="销毁一个活动"></a>销毁一个活动</h2><blockquote><p>按back即可销毁一个活动。或者用finish()方法。</p></blockquote><h2 id="在活动中穿梭–Intent"><a href="#在活动中穿梭–Intent" class="headerlink" title="在活动中穿梭–Intent"></a>在活动中穿梭–Intent</h2><ul><li><p>显式Intent</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent = <span class="keyword">new</span> Intent(MainActivity.<span class="keyword">this</span>,Main2Activity.class);</span><br><span class="line"><span class="comment">//第一个参数Context对象(提供活动的上下文)，第二个是目标活动</span></span><br><span class="line">startActivity(intent);<span class="comment">//启动活动的方法</span></span><br></pre></td></tr></table></figure></li><li><p>隐式Intent<br>步骤：</p></li><li><p>打开Androidmanifest.xml，在<activity>标签中配置<intent-filter></intent-filter></activity></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">activity</span> <span class="attr">android:name</span>=<span class="string">".Main3Activity"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">action</span> <span class="attr">android:name</span>=<span class="string">"com.example.a73233.activitytest2.ACTION_START"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">category</span> <span class="attr">android:name</span>=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">intent-filter</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">activity</span>&gt;</span></span><br></pre></td></tr></table></figure></li><li><p>打开要前往目标活动的源活动Activity。添加语句</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Intent intent2 = <span class="keyword">new</span> Intent(<span class="string">"com.example.a73233.activitytest2.ACTION_START"</span>);<span class="comment">//参数为响应的活动</span></span><br><span class="line">startActivity(intent2);</span><br></pre></td></tr></table></figure></li></ul><h2 id="Intent更多作用"><a href="#Intent更多作用" class="headerlink" title="Intent更多作用"></a>Intent更多作用</h2><ul><li>Intent不仅可以启动自己的活动还能启动其他活动<h3 id="启动浏览器"><a href="#启动浏览器" class="headerlink" title="启动浏览器"></a>启动浏览器</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent3 = <span class="keyword">new</span> Intent(Intent.ACTION_VIEW);</span><br><span class="line">intent3.setData(Uri.parse(<span class="string">"http://www.baidu.com"</span>));</span><br><span class="line">startActivity(intent3);</span><br></pre></td></tr></table></figure></li></ul><h3 id="启动拨号"><a href="#启动拨号" class="headerlink" title="启动拨号"></a>启动拨号</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Intent intent4 = <span class="keyword">new</span> Intent(Intent.ACTION_DIAL);</span><br><span class="line">intent4.setData(Uri.parse(<span class="string">"tel:10086"</span>));</span><br><span class="line">startActivity(intent4);</span><br></pre></td></tr></table></figure><h2 id="活动的生命周期"><a href="#活动的生命周期" class="headerlink" title="活动的生命周期"></a>活动的生命周期</h2><h3 id="活动状态"><a href="#活动状态" class="headerlink" title="活动状态"></a>活动状态</h3><blockquote><ul><li>运行状态：活动位于栈顶。</li><li>暂停状态：活动不在栈顶，但仍然可见。</li><li>停止状态：活动不在栈顶，完全不可见，系统看情况会收回。</li><li>销毁状态：活动被返回栈移除，系统倾向于收回这类状态的活动。</li></ul></blockquote><h3 id="活动的生存期"><a href="#活动的生存期" class="headerlink" title="活动的生存期"></a>活动的生存期</h3><p>Activity类提供了7个回调的方法，贯穿整个生命周期。</p><blockquote><p>*onCreate(),活动第一次创建时被调用进行初始化操作，加载布局和绑定事件等等。</p><ul><li>onStart(),不可见变可见时调用。</li><li>onResume(),准备好和用户进行交互时调用，此时活动一定位于栈顶，且是运行状态。</li><li>onPause(),启动或恢复另一个活动时调用。</li><li>onStop(), 启动一个完全不可见的活动时调用。</li><li>onDestory(), 活动被销毁前调用，之后活动进入销毁状态。</li></ul></blockquote><h2 id="活动的启动模式"><a href="#活动的启动模式" class="headerlink" title="活动的启动模式"></a>活动的启动模式</h2><p>活动的启动模式是在Androidmanifest.xml的<activity>标签中的LaunchMode指定的，一共有四种。</activity></p><h3 id="standard-默认模式"><a href="#standard-默认模式" class="headerlink" title="standard(默认模式)"></a>standard(默认模式)</h3><ul><li>这种模式在活动每一次启动时都会新建一个新的对象， 即使要启动的活动已经在栈顶。若当前活动在栈顶，又启动一个该活动，则要按两次back才可退出。<h3 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h3></li><li>此模式和stangard基本一样，<strong>但是</strong>当要启动的活动已经在<strong>栈顶</strong>，<strong>不会</strong>再新建一个对象。<h3 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h3></li><li>无论是standard还是singleTop,都会出现某个活动有多个实例的情况，有没有可能再整个程序运行过程中某个活动只有一个实例呢，那便是singleTask。此模式再启动一个活动时，会检测栈里有没有该活动，若果有，则直接调用该实例。<h3 id="singleInstance"><a href="#singleInstance" class="headerlink" title="singleInstance"></a>singleInstance</h3>我们知道一个活动是可以被其他程序调用的，但是前三种模式都做不到当其他程序调用某个活动实例时，两个程序<strong>共享这个活动实例</strong>，因为每个程序都有自己独立的返回栈，当一个活动入栈时必定会新建一个对象。但是singleInstance模式是可以<br>做到这一点。这种模式会启动一个新的返回栈管理这个程序，无论哪个程序来访问这个活动都公用一个返回栈。</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;创建一个活动&quot;&gt;&lt;a href=&quot;#创建一个活动&quot; class=&quot;headerlink&quot; title=&quot;创建一个活动&quot;&gt;&lt;/a&gt;创建一个活动&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;直接右键new -&amp;gt;Activity-&amp;gt;Empty Activity就好了，勾选General…自动添加对应布局，若勾选Launcher会自动设置当前活动为主活动。&lt;/li&gt;
&lt;li&gt;任何活动都要重写onCreate()方法，Android stdio会默认帮我们重写它的构造函数。&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;onCreate&lt;/span&gt;&lt;span class=&quot;params&quot;&gt;(Bundle savedInstanceState)&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;super&lt;/span&gt;.onCreate(savedInstanceState);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="Android入门" scheme="http://yoursite.com/tags/Android%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
  <entry>
    <title>Java--流与I/O包</title>
    <link href="http://yoursite.com/2019/01/28/Java%E2%80%94%E2%80%94IO%E6%B5%81/"/>
    <id>http://yoursite.com/2019/01/28/Java——IO流/</id>
    <published>2019-01-28T04:04:02.000Z</published>
    <updated>2019-01-31T06:40:13.254Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本文介绍流以及Java的IO包里边的常用类的使用方法和特性</strong></p><h1 id="流？I-O？"><a href="#流？I-O？" class="headerlink" title="流？I/O？"></a>流？I/O？</h1><blockquote><p>流是一组有序的数据序列，根据操作可分为输入流和输出流即（I/O流），I/O流也可以理解为一种通道程序。而I/O包提供给了很多工具(类)对I/O流进行操作，从而达到安全地将<strong>源数据通过流传送到目的地</strong>的目的。源和目的地可以是磁盘，键盘，鼠标，显示器，网络，压缩包等等。</p></blockquote><a id="more"></a><h1 id="输入-输出流"><a href="#输入-输出流" class="headerlink" title="输入/输出流"></a>输入/输出流</h1><h2 id="将数据从流里读取进来——输入流"><a href="#将数据从流里读取进来——输入流" class="headerlink" title="将数据从流里读取进来——输入流"></a>将数据从流里读取进来——输入流</h2><ul><li>I/O包给我们提供给了两个父类进行数据从流读取进来的操作。</li><li>其一<strong>抽象类InputStream</strong>(字节输出流)。该类是所有字节输入流的父类，遇到错误会引发IOException异常。</li><li>其二<strong>抽象类Reader</strong>(字符输出流)，该类适用于处理字符文本，是所有字符输入流的父类。</li></ul><h2 id="将数据输出到流里里边——输出流"><a href="#将数据输出到流里里边——输出流" class="headerlink" title="将数据输出到流里里边——输出流"></a>将数据输出到流里里边——输出流</h2><ul><li>I/O包给我们提供给了两个父类进行数据输出到流的操作。</li><li>其一<strong>OutputStream</strong>(字节输出流)。该类是所有字节输出流的父类，该类所有方法皆返回 <strong>void</strong>，遇到错误会引发IOException异常。</li><li>其二 <strong>Writer</strong>(字符输出流)，该类适用于处理字符文本，是所有字符输出流的父类。</li></ul><h2 id="I-O流常用子类"><a href="#I-O流常用子类" class="headerlink" title="I/O流常用子类"></a>I/O流常用子类</h2><p><strong>看到这你会发现，输入流与输出流的操作都各有两个类可以操作。另外</strong>Reader<strong>和</strong>Writer<strong>类有两个子类可以对流中的字节/字符进行转换。</strong></p><blockquote><ul><li>InputStreamReader：将流中的字节转换成字符读取进来。</li><li>OutputStreamWriter: 将字符转换成字节输出到流。</li><li>这两个类通常用作读/写磁盘文件。</li></ul></blockquote><p><strong>上述的输入/输出流当中有一种子类：带缓存的输入/输出流。缓存是I/O的一种性能优化。缓存流为I/O增加了内存缓存区。</strong></p><p>四个子类(缓存流)如下：</p><blockquote><ul><li>BufferedInputStream</li><li>BufferedOutputStream</li><li>BufferedReader</li><li>BufferedWriter</li></ul></blockquote><h1 id="File类"><a href="#File类" class="headerlink" title="File类"></a>File类</h1><p><strong>该类主要用于文件和目录的创建、文件的查找和文件的删除等。File对象代表磁盘中实际存在的文件和目录。可以通过以下构造方法创建一个File对象。</strong></p><h2 id="文件创建"><a href="#文件创建" class="headerlink" title="文件创建"></a>文件创建</h2><blockquote><p>new File(String pathname) 如：File abc = new (“d:/1.txt”);</p></blockquote><blockquote><p>new File(String parent,String child), String parent是父路径字符串， String child是子路径字符串。</p></blockquote><blockquote><p>new File(File f,String child); File f父路径对象，String child是子路径字符串。</p></blockquote><h2 id="获取文件信息"><a href="#获取文件信息" class="headerlink" title="获取文件信息"></a>获取文件信息</h2><ul><li>File提供了许多方法获取文件本身信息。</li></ul><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">返回值</th><th style="text-align:left">说明</th></tr></thead><tbody><tr><td style="text-align:left">getNamw()</td><td style="text-align:left">String</td><td style="text-align:left">获取文件名称</td></tr><tr><td style="text-align:left">canRead()</td><td style="text-align:left">boolean</td><td style="text-align:left">判断文件是否可读</td></tr><tr><td style="text-align:left">canWrite()</td><td style="text-align:left">boolean</td><td style="text-align:left">判断文件是否可写</td></tr><tr><td style="text-align:left">exits()</td><td style="text-align:left">boolean</td><td style="text-align:left">判断文件是否存在</td></tr><tr><td style="text-align:left">length()</td><td style="text-align:left">long</td><td style="text-align:left">获取文件长度(字节为单位)</td></tr><tr><td style="text-align:left">getAbsolutePath()</td><td style="text-align:left">String</td><td style="text-align:left">获取文件绝对路径</td></tr><tr><td style="text-align:left">getParent()</td><td style="text-align:left">String</td><td style="text-align:left">获取文件父路径</td></tr><tr><td style="text-align:left">lastModified()</td><td style="text-align:left">long</td><td style="text-align:left">获取文件最后修改时间</td></tr><tr><td style="text-align:left">delete()</td><td style="text-align:left">void</td><td style="text-align:left">删除文件</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本文介绍流以及Java的IO包里边的常用类的使用方法和特性&lt;/strong&gt;&lt;/p&gt;
&lt;h1 id=&quot;流？I-O？&quot;&gt;&lt;a href=&quot;#流？I-O？&quot; class=&quot;headerlink&quot; title=&quot;流？I/O？&quot;&gt;&lt;/a&gt;流？I/O？&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;流是一组有序的数据序列，根据操作可分为输入流和输出流即（I/O流），I/O流也可以理解为一种通道程序。而I/O包提供给了很多工具(类)对I/O流进行操作，从而达到安全地将&lt;strong&gt;源数据通过流传送到目的地&lt;/strong&gt;的目的。源和目的地可以是磁盘，键盘，鼠标，显示器，网络，压缩包等等。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="Java入门" scheme="http://yoursite.com/tags/Java%E5%85%A5%E9%97%A8/"/>
    
  </entry>
  
</feed>
